(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{579:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react-的源码流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-的源码流程"}},[t._v("#")]),t._v(" React 的源码流程")]),t._v(" "),s("p",[t._v("React 的源码架构分为三个部分：")]),t._v(" "),s("ul",[s("li",[t._v("调度器（Scheduler）：调度任务的优先级，高优任务优先进入 Reconciler")]),t._v(" "),s("li",[t._v("协调器（Reconciler）：VDOM 的实现，负责根据自变量变化计算出 UI 变化，简单的说就是找出变化的组件")]),t._v(" "),s("li",[t._v("渲染器（Renderer）：负责将变化的组件渲染到页面上")])]),t._v(" "),s("h2",{attrs:{id:"同步更新流程-shouldtimeslice-为-false"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步更新流程-shouldtimeslice-为-false"}},[t._v("#")]),t._v(" 同步更新流程（shouldTimeSlice 为 false）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createRoot "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nroot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"reactdom-createroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-createroot"}},[t._v("#")]),t._v(" ReactDOM.createRoot")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// container：DOM 元素，React 组件树将在其中进行渲染。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// options：可选配置对象，包括如何处理 Hydration 等。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hydrate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hydrate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hydrationCallbacks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hydrationOptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isStrictMode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstable_strictMode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成 FiberRootNode 和 HostRootFiber")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ConcurrentRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrationCallbacks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isStrictMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReactDOMRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * FiberRootNode: {\n *  tag: ConcurrentRoot (就是 1)\n *  current: FiberNode（具体为 HostRootFiber）\n *  containerInfo: DOMElement（即为 createRoot 传入的 container 元素，例如 div#root）\n * }\n *\n * FiberRootNode.current 为 HostRootFiber\n * HostRootFiber: {\n *  tag: HostRoot （就是 3）\n *  stateNode: FiberRootNode （指向 FiberRootNode）\n * }\n */")]),t._v("\n")])])]),s("p",[s("code",[t._v("ReactDOM.createRoot(container, options?)")]),t._v("创建一个与 DOM 容器节点绑定的 root，称为 FiberRootNode。这个 root 负责管理 React 组件树的渲染。 返回值为 "),s("code",[t._v("new ReactDOMRoot(root)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReactDOMRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("internalRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_internalRoot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" internalRoot\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("ReactDOMRoot")]),t._v(" 实例上有 "),s("code",[t._v("render")]),t._v(" 方法，用于将 React 元素渲染到容器中，当项目中调用 "),s("code",[t._v("root.render(<App />)")]),t._v(" 时，这标志着渲染操作的开始。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// children：React元素，通常是应用的顶层组件。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReactDOMRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("render")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("children")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_internalRoot\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("containerInfo\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateContainer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"render-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#render-阶段"}},[t._v("#")]),t._v(" render 阶段")]),t._v(" "),s("p",[t._v("Reconciler 工作的阶段在 React 内部被称为 render 阶段。")]),t._v(" "),s("h4",{attrs:{id:"updatecontainer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updatecontainer"}},[t._v("#")]),t._v(" updateContainer")]),t._v(" "),s("p",[s("code",[t._v("updateContainer(element, container, parentComponent, callback?)")]),t._v(" 在指定的 container 中渲染或更新给定的 React 元素。")]),t._v(" "),s("ul",[s("li",[t._v("创建或更新 Fiber 节点。")]),t._v(" "),s("li",[t._v("调用 schedulerUpdateOnFiber 以调度这个 Fiber 节点的更新。")])]),t._v(" "),s("h4",{attrs:{id:"scheduleupdateonfiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduleupdateonfiber"}},[t._v("#")]),t._v(" scheduleUpdateOnFiber")]),t._v(" "),s("p",[t._v("scheduleUpdateOnFiber(fiber, lane, eventTime)，标记 Fiber 节点上的更新，并根据更新的优先级（lanes）安排执行。")]),t._v(" "),s("ul",[s("li",[t._v("计算更新的优先级，确定更新所在的 lane。")]),t._v(" "),s("li",[t._v("根据 Fiber 节点的优先级，调用 ensureRootIsScheduled 来确保根节点的任务被调度。")])]),t._v(" "),s("h4",{attrs:{id:"ensurerootisscheduled"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ensurerootisscheduled"}},[t._v("#")]),t._v(" ensureRootIsScheduled")]),t._v(" "),s("p",[t._v("ensureRootIsScheduled(root) 确保整个应用的根节点（root）有一个调度任务。")]),t._v(" "),s("ul",[s("li",[t._v("检查 root 上是否有待执行的工作。")]),t._v(" "),s("li",[t._v("根据当前的调度优先级，调用 scheduler 的 schedulerCallback 进行任务调度。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" schedulerPriorityLevel\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lanesToEventPriority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("DiscreteEventPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    schedulerPriorityLevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ImmediatePriority\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ContinuousEventPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    schedulerPriorityLevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UserBlockingPriority\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("DefaultEventPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    schedulerPriorityLevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NormalPriority\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("IdleEventPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    schedulerPriorityLevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IdlePriority\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    schedulerPriorityLevel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NormalPriority\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"schedulecallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#schedulecallback"}},[t._v("#")]),t._v(" scheduleCallback")]),t._v(" "),s("p",[s("code",[t._v("scheduleCallback(priorityLevel, callback)")]),t._v(" 根据给定的优先级，安排一个回调函数在合适的时间执行。scheduleCallback 实际上是调用了 Scheduler.unstable_scheduleCallback "),s("code",[t._v("var scheduleCallback = Scheduler.unstable_scheduleCallback")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unstable_scheduleCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("priorityLevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" currentTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unstable_now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" startTime\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" delay "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delay\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" delay "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" delay "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" delay\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentTime\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentTime\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timeout\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("priorityLevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ImmediatePriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IMMEDIATE_PRIORITY_TIMEOUT")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("UserBlockingPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("USER_BLOCKING_PRIORITY_TIMEOUT")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("IdlePriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDLE_PRIORITY_TIMEOUT")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("LowPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOW_PRIORITY_TIMEOUT")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("NormalPriority")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NORMAL_PRIORITY_TIMEOUT")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" expirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" timeout\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" taskIdCounter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("priorityLevel")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" priorityLevel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("startTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" startTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("expirationTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expirationTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("sortIndex")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" currentTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is a delayed task.")]),t._v("\n    newTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sortIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" startTime\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timerQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("taskQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timerQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All tasks are delayed, and this is the task with the earliest delay.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isHostTimeoutScheduled"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cancel an existing timeout.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cancelHostTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        isHostTimeoutScheduled "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Schedule a timeout.")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestHostTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleTimeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" currentTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    newTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sortIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expirationTime\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("taskQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wait until the next time we yield.")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isHostCallbackScheduled "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isPerformingWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      isHostCallbackScheduled "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestHostCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flushWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newTask\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"requesthostcallback-调用-scheduleperformworkuntildeadline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requesthostcallback-调用-scheduleperformworkuntildeadline"}},[t._v("#")]),t._v(" requestHostCallback 调用 schedulePerformWorkUntilDeadline")]),t._v(" "),s("p",[t._v("在浏览器中使用 postMessage 技术确保尽早插入新的宏任务。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" channel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" port "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port2\nchannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onmessage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" performWorkUntilDeadline\n"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("schedulePerformWorkUntilDeadline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"performworkuntildeadline-调用-flushwork-清空所有工作队列-执行所有剩余的工作。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performworkuntildeadline-调用-flushwork-清空所有工作队列-执行所有剩余的工作。"}},[t._v("#")]),t._v(" performWorkUntilDeadline 调用 flushWork 清空所有工作队列，执行所有剩余的工作。")]),t._v(" "),s("h4",{attrs:{id:"flushwork-调用-workloop-处理所有的工作单元-直到队列清空或达到浏览器的帧限制。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flushwork-调用-workloop-处理所有的工作单元-直到队列清空或达到浏览器的帧限制。"}},[t._v("#")]),t._v(" flushWork 调用 workLoop 处理所有的工作单元，直到队列清空或达到浏览器的帧限制。")]),t._v(" "),s("h4",{attrs:{id:"workloop-调用-并发地执行根节点上的工作。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workloop-调用-并发地执行根节点上的工作。"}},[t._v("#")]),t._v(" workLoop 调用 并发地执行根节点上的工作。")]),t._v(" "),s("p",[t._v("利用 React 的 Fiber 架构并发地执行更新，允许中断和恢复。")]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("p",[t._v("判断 shouldTimeSlice 为 false，调用 renderRootSync 同步渲染根节点。同步遍历 Fiber 树，执行更新，不允许任务中断。renderRootSync 会调用 workLoopSync。")]),t._v(" "),s("p",[t._v("判断 shouldTimeSlice 为 true，调用 renderRootConcurrent 异步渲染根节点。异步遍历 Fiber 树，执行更新，允许任务中断。renderRootConcurrent 会调用 workLoopConcurrent。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"renderrootsync-调用-workloopsync-同步执行工作循环。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renderrootsync-调用-workloopsync-同步执行工作循环。"}},[t._v("#")]),t._v(" renderRootSync 调用 workLoopSync 同步执行工作循环。")]),t._v(" "),s("h4",{attrs:{id:"workloopsync-调用-performunitofwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workloopsync-调用-performunitofwork"}},[t._v("#")]),t._v(" workLoopSync 调用 performUnitOfWork")]),t._v(" "),s("p",[t._v("performUnitOfWork 方法会创建下一个 fiberNode 并赋值给 workInProgress，并将 workInProgress 与已创建的 fiberNode 连接起来构成 Fiber Tree。")]),t._v(" "),s("p",[t._v("performUnitOfWork 中会调用 beginWork 和 completeWork，分别处理开始和结束工作。在遍历的过程中，会为 FiberNode 标记“代表不同副作用的 flags”，以便后续在 Renderer 中使用。")]),t._v(" "),s("h4",{attrs:{id:"beginwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beginwork"}},[t._v("#")]),t._v(" beginWork")]),t._v(" "),s("p",[t._v("beginWork 首先判断当前流程属于 mount 还是 update，判断依据为 current Fiber 是否存在（"),s("code",[t._v("current !== null")]),t._v("）。")]),t._v(" "),s("p",[t._v("如果当前流程为 update 流程，则 workInProgress FiberNode 存在对应的 Current FiberNode（"),s("code",[t._v("current = workInProgress.alternate")]),t._v("）。如果本次更新不影响 FiberNode.child，则可以复用对应的 Current FiberNode（"),s("code",[t._v("attemptEarlyBailoutIfNoScheduledUpdate")]),t._v("），这是一条 render 阶段的优化路径。")]),t._v(" "),s("p",[t._v("如果无法复用 Current FiberNode，则 mount 和 update 的流程大体一致，包括：")]),t._v(" "),s("ul",[s("li",[t._v("根据 workInProgress.tag 进入“不同类型元素的处理分支”\n"),s("ul",[s("li",[t._v("HostComponent 代表原生 Element 类型（比如 DIV、SPAN）")]),t._v(" "),s("li",[t._v("IndeterminateComponent 是 FC mount 时进入的分支，update 时则进入 FunctionComponent 分支")]),t._v(" "),s("li",[t._v("HostText 代表文本元素类型")])])]),t._v(" "),s("li",[t._v("使用 reconcile 算法生成下一级 fiberNode\n"),s("ul",[s("li",[t._v("如果常见类型（比如 FunctionComponent、ClassComponent、HostComponent）没有命中优化策略，它们最终会调用 reconcileChildFibers 函数生成子 fiberNode")])])])]),t._v(" "),s("p",[s("strong",[t._v("beginWork 的 mount 和 update 的区别在于：最终是否会为“生成的子 fiberNode”标记“副作用 flags”")])]),t._v(" "),s("h5",{attrs:{id:"reconcilechildfibers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reconcilechildfibers"}},[t._v("#")]),t._v(" reconcileChildFibers")]),t._v(" "),s("p",[t._v("reconcileChildFibers 负责协调（或者说更新）子 Fiber，它对比现有子 Fiber 节点与新生成的 React 元素之间的差异，决定子 Fiber 节点中哪些节点需要更新、删除或者创建，在这个方法中只是对子 Fiber 节点添加了 "),s("code",[t._v("returnFiber.flags |= ChildDeletion")]),t._v(" 或 "),s("code",[t._v("newFiber.flags |= Placement")]),t._v(" 这些标记。")]),t._v(" "),s("h4",{attrs:{id:"completework"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completework"}},[t._v("#")]),t._v(" completeWork")]),t._v(" "),s("p",[t._v("completeWork 具体逻辑如下：")]),t._v(" "),s("ul",[s("li",[t._v("根据 workInProgress.tag 进入不同的分支")]),t._v(" "),s("li",[t._v("在每个分支中，根据 "),s("code",[t._v("current !== null")]),t._v(" 区分 mount 和 update 流程")]),t._v(" "),s("li",[t._v("完成 mount 或 update 流程后，都会执行 bubbleProperties 方法完成 flags 的冒泡")])]),t._v(" "),s("h5",{attrs:{id:"completework-的-mount-流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completework-的-mount-流程"}},[t._v("#")]),t._v(" completeWork 的 mount 流程")]),t._v(" "),s("ul",[s("li",[t._v("例如对于 HostComponent，在 mount 流程中首先会调用 createInstance 方法创建对应的 DOM 元素")]),t._v(" "),s("li",[t._v("然后执行 "),s("code",[t._v("appendAllChildren")]),t._v(" 将下一级 DOM 元素挂在在上一步创建的 DOM 元素下")]),t._v(" "),s("li",[t._v("执行 "),s("code",[t._v("finalizeInitialChildren")]),t._v(" 完成属性的初始化\n"),s("ul",[s("li",[t._v("styles，对应 "),s("code",[t._v("setValueForStyles")]),t._v("方法")]),t._v(" "),s("li",[t._v("innerHTML，对应 "),s("code",[t._v("setInnerHTML")]),t._v(" 方法")]),t._v(" "),s("li",[t._v("文本类型 children，对应 "),s("code",[t._v("setTextContent")]),t._v(" 方法")]),t._v(" "),s("li",[t._v("不会在 DOM 中冒泡的事件，包括 cancel、close、invalid、load、scroll、toggle，对应 "),s("code",[t._v("listenToNonDelegatedEvent")]),t._v(" 方法")]),t._v(" "),s("li",[t._v("其他属性，对应 "),s("code",[t._v("setValueForProperty")]),t._v(" 方法")])])])]),t._v(" "),s("h5",{attrs:{id:"completework-的-update-流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completework-的-update-流程"}},[t._v("#")]),t._v(" completeWork 的 update 流程")]),t._v(" "),s("ul",[s("li",[t._v("例如对于 HostComponent，在 update 流程中首先会调用 updateHostComponent 方法，主要是标记属性的更新")]),t._v(" "),s("li",[t._v("如果 oldProps 和 newProps 相等，会直接 return，如果不相等，会调用 "),s("code",[t._v("diffProperties")]),t._v(" 方法")]),t._v(" "),s("li",[s("code",[t._v("diffProperties")]),t._v(" 方法包含两次遍历：\n"),s("ul",[s("li",[t._v("第一次遍历：标记删除“更新前有，更新后没有”的属性")]),t._v(" "),s("li",[t._v("第二次遍历：标记更新“update 流程前后发生改变”的属性")])])]),t._v(" "),s("li",[t._v("所有变化属性的 key，value 会保存在 fiberNode.updateQueue 中，同时会标记 "),s("code",[t._v("fiberNode.flags |= Update")])])]),t._v(" "),s("p",[t._v("beginWork 的 reconcileChildFibers 方法用来“标记 fiberNode 的插入、删除、移动”，completeWork 方法才是真正的将 UI 的变化整理出来，例如 HostComponent 的 mount 过程，会将生成的 DOM 元素放到 workInProgress.stateNode 然后挂在到父 DOM 上，update 过程会将属性的变化放到 updateQueue 中。")]),t._v(" "),s("h4",{attrs:{id:"completework-的上层-completeunitofwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#completework-的上层-completeunitofwork"}},[t._v("#")]),t._v(" completeWork 的上层 completeUnitOfWork")]),t._v(" "),s("p",[t._v("completeUnitOfWork 中除了调用 completeWork 处理当前节点外，在最后会执行一下代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// beginWork 执行完，next 为 null 时，进入 completeWork，completeWork 执行完，会检查是否有 sibling")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" siblingFiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有 siblingFiber，将 workInProgress 指向 siblingFiber，重新执行 performUnitOfWork")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siblingFiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" siblingFiber\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有 siblingFiber ，就进行 returnFiber 的 completeWork")]),t._v("\ncompletedWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber\nworkInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork\n")])])]),s("h3",{attrs:{id:"commit-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-阶段"}},[t._v("#")]),t._v(" commit 阶段")]),t._v(" "),s("p",[t._v("Renderer（渲染器）工作的阶段被称为 commit 阶段。在 commit 阶段，会将各种副作用（flags）commit（提交） 到宿主环境的 UI 中。")]),t._v(" "),s("p",[s("strong",[t._v("render 阶段流程可能会被打断，而 commit 阶段一旦开始就会同步执行直到完成")])]),t._v(" "),s("p",[t._v("commit 工作流程分为三个阶段：")]),t._v(" "),s("ul",[s("li",[t._v("开始前的准备工作，比如判断“是否有副作用需要执行”")]),t._v(" "),s("li",[t._v("处理副作用")]),t._v(" "),s("li",[t._v("结束后的收尾工作，比如调度新的更新")])]),t._v(" "),s("p",[t._v("处理副作用阶段还可以分为三个子阶段：")]),t._v(" "),s("ul",[s("li",[t._v("BeforeMutation 阶段")]),t._v(" "),s("li",[t._v("Mutation 阶段")]),t._v(" "),s("li",[t._v("Layout 阶段")])]),t._v(" "),s("p",[t._v("commit 阶段的起点开始与 commitRoot 方法的调用。")]),t._v(" "),s("p",[t._v("那么 commitRoot 方法在什么时候调用？")]),t._v(" "),s("p",[t._v("函数会调用 renderRootSync 或 renderRootConcurrent，最后会调用 finishConcurrentRender 函数。")]),t._v(" "),s("p",[t._v("renderRootSync 或 renderRootConcurrent 中调用 completeUnitOfWork 的最后，会设置 "),s("code",[t._v("workInProgressRootExitStatus = RootCompleted")]),t._v("，表示整个 workInProgress Fiber Tree 的构建完成。")]),t._v(" "),s("p",[t._v("在 finishConcurrentRender 函数中判断 exitStatus 等于 RootCompleted，会调用 commitRoot 函数。")]),t._v(" "),s("h4",{attrs:{id:"commitroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitroot"}},[t._v("#")]),t._v(" commitRoot")]),t._v(" "),s("p",[t._v("commmitRoot(root) 的参数：")]),t._v(" "),s("ul",[s("li",[t._v("root 代表“本次更新所属的 FiberRootNode”")]),t._v(" "),s("li",[t._v("root.finishedWork 代表 workInProgress HostRootFiber，即“render 阶段构建的 wokeInProgress Fiber Tree” 的 HostRootFiber")])]),t._v(" "),s("p",[t._v("在三个子阶段执行之前，需要判断本次更新是否涉及“与三个子阶段相关的副作用” 逻辑如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitRootImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" renderPriorityLevel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略之前代码")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" finishedWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finishedWork\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// subtreeHasEffects 代表 workInProgress HostRootFiber 的子孙元素存在的副作用 flags")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" subtreeHasEffects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finishedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtreeFlags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BeforeMutationMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" MutationMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" LayoutMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PassiveMask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" NoFlags\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rootHasEffect 代表 workInProgress HostRootFiber 自身存在的副作用 flags")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rootHasEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finishedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BeforeMutationMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" MutationMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" LayoutMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" PassiveMask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" NoFlags\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subtreeHasEffects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" rootHasEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 本次更新存在与三个子阶段相关的副作用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入 commit 阶段的三个子阶段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" shouldFireAfterActiveInstanceBlur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finishedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitMutationEffects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finishedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitLayoutEffects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finishedWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略：本次更新没有三个子阶段的副作用")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"mask-参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mask-参考"}},[t._v("#")]),t._v(" mask 参考")]),t._v(" "),s("ul",[s("li",[t._v("Update:\n"),s("ul",[s("li",[t._v("ClassComponent 存在更新，且定义了 componentDidMount 或 componentDidUpdate 方法；")]),t._v(" "),s("li",[t._v("HostComponent 发生了属性变化")]),t._v(" "),s("li",[t._v("HostText 发生了内容变化")]),t._v(" "),s("li",[t._v("FC 定义了 useLayoutEffect")])])]),t._v(" "),s("li",[t._v("Snapshot： ClassComponet 存在更新，且定义了 getSnapshotBeforeUpdate 方法")]),t._v(" "),s("li",[t._v("Placement：当前 fiberNode 或子孙 fiberNode 存在“需要插入或移动的 HostComponent”")]),t._v(" "),s("li",[t._v("ChildDeletion：当前 fiberNode 或子孙 fiberNode 存在“需要删除的子 HostComponent 或子 HostText”")]),t._v(" "),s("li",[t._v("ContentReset：清空 HostComponent 的文本内容")]),t._v(" "),s("li",[t._v("Ref：HostComponent ref 属性的创建与更新")]),t._v(" "),s("li",[t._v("Hydrating： hydrate 相关")]),t._v(" "),s("li",[t._v("Visibility： 控制 SuspenseComponent 的子树与 fallback 切换时子树的显隐")]),t._v(" "),s("li",[t._v("Callback： 当 ClassComponent 中的 this.setState 执行时，或 ReactDOM.render 执行时传递了回调函数参数")]),t._v(" "),s("li",[t._v("Passive：FC 中定义了 useEffect 且需要触发回调函数")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BeforeMutationMask： Update | Snapshot | 0，代表 BeforeMutation 子阶段跟 Update 和Snapshot 相关。由于 Snapshot 是“ClassComponet 存在更新，且定义了getSnapshotBeforeUpdate 方法”后才会设置的 flags，因此可以判断 BeforeMutation 子阶段会执行 getSnapshotBeforeUpdate 方法。\n")])])]),s("h4",{attrs:{id:"commitbeforemutationeffects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitbeforemutationeffects"}},[t._v("#")]),t._v(" commitBeforeMutationEffects")]),t._v(" "),s("p",[t._v("commitBeforeMutationEffects 会调用 commitBeforeMutationEffects_begin")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" firstChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略之前代码")]),t._v("\n  nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstChild\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects_begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略重置全局变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"commitbeforemutationeffects-begin-会调用-commitbeforemutationeffects-complete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitbeforemutationeffects-begin-会调用-commitbeforemutationeffects-complete"}},[t._v("#")]),t._v(" commitBeforeMutationEffects_begin 会调用 commitBeforeMutationEffects_complete")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects_begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向下遍历直到“第一个满足如下条件之一的 fiberNode”")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 当前 fiberNode 的子 fiberNode 不包含“该子阶段对应的 flags”，即当前 fiberNode 是“包含该子阶段对应的 flags”的“层级最低”的 fiberNode")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEffect\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtreeFlags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" BeforeMutationMask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" NoFlags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略代码")]),t._v("\n      nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects_complete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// commitBeforeMutationEffects_complete 用来执行 “flags 对应的操作”")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffects_complete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEffect\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCurrentFiber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对当前 fiberNode 执行“flags 对应的操作”")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationEffectsOnFiber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误处理")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("captureCommitPhaseError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetCurrentFiber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前 fiberNode 存在兄弟 fiberNode，nextEffect 赋值为 sibling，再次走到commitBeforeMutationEffects_begin的 while 循环中")]),t._v("\n      nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sibling\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前 fiberNode 不存在兄弟 fiberNode，nextEffect 赋值为 父 fiberNode，再次走到commitBeforeMutationEffects_begin的 while 循环中")]),t._v("\n    nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("以上可以看出，如果说 render 阶段的 completeWork 会完成“自下而上”的 subtreeFlags 标记过程，那么 commit 阶段的 commitBeforeMutationEffects 会完成“自下而上”的 subtreeFlags 消费过程。")]),t._v(" "),s("h5",{attrs:{id:"commitbeforemutationeffectsonfiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitbeforemutationeffectsonfiber"}},[t._v("#")]),t._v(" commitBeforeMutationEffectsOnFiber")]),t._v(" "),s("p",[t._v("主要处理一下两种类型的 fiberNode：")]),t._v(" "),s("ul",[s("li",[t._v("ClassComponent 执行 getSnapshotBeforeUpdate 方法")]),t._v(" "),s("li",[t._v("HostRoot 清空 HostRoot 挂载的内容，方便 Mutation 子阶段的渲染")])]),t._v(" "),s("h4",{attrs:{id:"commitmutationeffects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitmutationeffects"}},[t._v("#")]),t._v(" commitMutationEffects")]),t._v(" "),s("p",[t._v("commitMutationEffects 跟 commitBeforeMutationEffects 的逻辑类似：")]),t._v(" "),s("ul",[s("li",[t._v("commitMutationEffects 会调用 commitMutationEffects_begin")]),t._v(" "),s("li",[t._v("commitMutationEffects_begin 会调用 commitMutationEffects_complete\n"),s("ul",[s("li",[t._v("commitMutationEffects_begin 有特有的 commitDeletion 逻辑，用来处理“需要删除的 fiberNode”，需要考虑的事情很多：子树中所有组件的 ummout 逻辑，子树中所有 ref 属性的卸载操作，子树中所有 effect 相关 Hook 的 destory 回调执行等")])])])]),t._v(" "),s("h5",{attrs:{id:"commitmutationeffectsonfiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitmutationeffectsonfiber"}},[t._v("#")]),t._v(" commitMutationEffectsOnFiber")]),t._v(" "),s("ul",[s("li",[t._v("Placement flag 对应 commitPlacement 方法，执行流程分为三个步骤\n"),s("ul",[s("li",[t._v("从当前 fiberNode 向上遍历，获取第一个类型为 HostComponent、HostRoot、HostPortal 三者之一的祖先 fiberNode，其对应的 DOM 元素是“执行 DOM 操作的目标元素的父级 DOM 元素” "),s("code",[t._v("var parentFiber = getHostParentFiber(finishedWork)")])]),t._v(" "),s("li",[t._v("获取用于执行 parentNode.insertBefore(child, before) 方法的 “before 对应 DOM 元素” "),s("code",[t._v("var before = getHostSibling(finishedWork)")])]),t._v(" "),s("li",[t._v("执行 parentNode.insertBefore 方法（存在 before 的情况）或 parentNode.appendChild 方法（不存在 before 的情况）")])])]),t._v(" "),s("li",[t._v("Update flag 对应 commitWork 方法\n"),s("ul",[s("li",[t._v("对于 FC 等类型的 fiberNode，会执行 commitHookEffectListUnmount 和 commitHookEffectListMount 方法")]),t._v(" "),s("li",[t._v("对于 HostComponent 类型的 fiberNode，会执行 commitUpdate 方法，commitUpdate 方法又会调用 updateProperties 最终会在 updateDomProperties 方法中遍历并改变对应属性，处理以下四种类型的数据\n"),s("ul",[s("li",[t._v("style 属性变化")]),t._v(" "),s("li",[t._v("innerHTML")]),t._v(" "),s("li",[t._v("直接文本节点变化")]),t._v(" "),s("li",[t._v("其他元素属性")])])])])])]),t._v(" "),s("h4",{attrs:{id:"commitlayouteffects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitlayouteffects"}},[t._v("#")]),t._v(" commitLayoutEffects")]),t._v(" "),s("p",[t._v("commitLayoutEffects 跟 commitBeforeMutationEffects 的逻辑类似：")]),t._v(" "),s("ul",[s("li",[t._v("commitLayoutEffects 会调用 commitLayoutEffects_begin")]),t._v(" "),s("li",[t._v("commitLayoutEffects_begin 会调用 commitLayoutEffects_complete")])]),t._v(" "),s("h5",{attrs:{id:"fiber-tree-切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber-tree-切换"}},[t._v("#")]),t._v(" Fiber Tree 切换")]),t._v(" "),s("p",[t._v("在进入 Layout 子阶段之前，会执行如下代码完成 Fiber Tree 的切换：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finishedWork\n")])])]),s("p",[t._v("之所以选择这一时机切换 Fiber Tree，是因为对于 ClassComponent，当执行 componentWillUnMount 时（Mutation 子阶段），Current Fiber Tree 仍对应 UI 中的树。当执行 commponentDidMount/Update 时（Layout 子阶段），Current Fiber Tree 已经对应本次更新的 Fiber Tree。")]),t._v(" "),s("h5",{attrs:{id:"uselayouteffect-callback-会在该阶段执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect-callback-会在该阶段执行"}},[t._v("#")]),t._v(" useLayoutEffect callback 会在该阶段执行")]),t._v(" "),s("h5",{attrs:{id:"commitlayouteffectsonfiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitlayouteffectsonfiber"}},[t._v("#")]),t._v(" commitLayoutEffectsOnFiber")]),t._v(" "),s("ul",[s("li",[t._v("对于 ClassComponent\n"),s("ul",[s("li",[t._v("会执行 componentDidMount 或 componentDidUpdate 方法")]),t._v(" "),s("li",[t._v("执行 this.setState(newState, callback) 传递的 callback 参数会保存在对应的 fiberNode.updateQueue 中，commitLayoutEffectsOnFiber 会执行这些 callback")])])]),t._v(" "),s("li",[t._v("对于 FC，会执行 useLayoutEffect callback")]),t._v(" "),s("li",[t._v("对于 HostRoot，执行 ReactDOM.render 传递的 callback 参数会保存在对应的 fiberNode.updateQueue 中，commitLayoutEffectsOnFiber 会执行这些 callback")])])])}),[],!1,null,null,null);s.default=n.exports}}]);