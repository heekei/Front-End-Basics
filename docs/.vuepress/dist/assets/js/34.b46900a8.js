(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{480:function(t,e,a){t.exports=a.p+"assets/img/usual-command.7e5ea895.png"},481:function(t,e,a){t.exports=a.p+"assets/img/execute-process.7bc2aa7b.png"},482:function(t,e,a){t.exports=a.p+"assets/img/shell2.c03c91b8.png"},483:function(t,e,a){t.exports=a.p+"assets/img/shell3.dcaf959e.png"},736:function(t,e,a){"use strict";a.r(e);var s=a(25),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"shell-脚本编程扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本编程扩展"}},[t._v("#")]),t._v(" shell 脚本编程扩展")]),t._v(" "),e("h2",{attrs:{id:"shell-中的常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-中的常用命令"}},[t._v("#")]),t._v(" shell 中的常用命令")]),t._v(" "),e("p",[e("img",{attrs:{src:a(480),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"脚本解释器在环境变量中指定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脚本解释器在环境变量中指定"}},[t._v("#")]),t._v(" 脚本解释器在环境变量中指定")]),t._v(" "),e("p",[t._v("除了比较常见的用路径指定脚本解释器的方式，还有一种是指定环境变量中的脚本解释器。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("指定脚本解释器的路径\n#!/bin/bash`\n\n指定环境变量中的脚本解释器\n#!/usr/bin/env bash\n")])])]),e("p",[t._v("这样做的好处是，系统会自动在 "),e("code",[t._v("PATH")]),t._v(" 环境变量中查找指定的程序（如例子中的 bash）。因为程序的路径是不确定的，比如安装完新版本的 bash 后，我们有可能会把这个新的路径添加到"),e("code",[t._v("PATH")]),t._v("中，来“隐藏”老版本的 bash。所以操作系统的"),e("code",[t._v("PATH")]),t._v("变量有可能被配置为指向程序的另一个版本，如果还是直接用 "),e("code",[t._v("#!/bin/bash")]),t._v("，那么系统还是会选择老版本的 bash 来执行脚本，如果用"),e("code",[t._v("#!/usr/bin/env bash")]),t._v("，就会使用新版本了。")]),t._v(" "),e("h2",{attrs:{id:"shell-命令执行过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-命令执行过程"}},[t._v("#")]),t._v(" Shell 命令执行过程")]),t._v(" "),e("h3",{attrs:{id:"_1-字符解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符解析"}},[t._v("#")]),t._v(" 1. 字符解析：")]),t._v(" "),e("ul",[e("li",[t._v("识别换行符、分号（;）做行的分割")]),t._v(" "),e("li",[t._v("识别命令连接符（||、&&、管道）做命令的分割")]),t._v(" "),e("li",[t._v("识别空格、tab 符，做命令和参数的分割")])]),t._v(" "),e("h3",{attrs:{id:"_2-shell-展开"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-shell-展开"}},[t._v("#")]),t._v(" 2. shell 展开")]),t._v(" "),e("ul",[e("li",[t._v("大括号展开：一般由三部分构成，前缀，一对大括号，后缀，大括号内可以是逗号分隔的字符串序列，也可以是序列表达式"),e("code",[t._v("{x..y[..incr]}")])])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串序列")]),t._v("\na"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b,c,d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("e "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =>abc,ace,ade")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表达式序列，数字可以用 incr 调整增量，字母不行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 1,2,3,4,5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 1,3,5")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => a,b,c,d,e")]),t._v("\n")])])]),e("ul",[e("li",[t._v("波浪号展开")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前用户的主目录")]),t._v("\n~ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定用户的主目录")]),t._v("\n~tom/foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 用户 tom 的 "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/foo\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前工作目录")]),t._v("\n~+/foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PWD")]),t._v("/foo\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上一个工作目录")]),t._v("\n~-/foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${$OLDPWD}")]),t._v("/foo\n")])])]),e("ul",[e("li",[t._v("参数展开")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主要说一下 间接参数扩展")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("parameter")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("var")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("parameter}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出 hello")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 参数长度 ${#parameter} 等前面有介绍")]),t._v("\n")])])]),e("ul",[e("li",[t._v("命令替换：在子进程中执行命令，并用得到的结果替换包裹的内容，形式上有两种："),e("code",[t._v("$(...)")]),t._v(" 和反引号``")]),t._v(" "),e("li",[t._v("数学计算：使用 "),e("code",[t._v("$(())")]),t._v(" 包裹数学运算表达式，得到结果并替换")]),t._v(" "),e("li",[t._v("文件名展开：当有单词没有被引号包裹，且其中出现了 "),e("code",[t._v("*")]),t._v(" 、 "),e("code",[t._v("?")]),t._v(" 、 "),e("code",[t._v("[]")]),t._v(" 等字符，则 shell 会去按照正则匹配的方式查找文件名进行替换，如果没有找到则保持不变")])]),t._v(" "),e("h3",{attrs:{id:"_3-重定向-将-stdin、stdout、stderr-的文件描述符进行指向变更"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-重定向-将-stdin、stdout、stderr-的文件描述符进行指向变更"}},[t._v("#")]),t._v(" 3. 重定向，将 stdin、stdout、stderr 的文件描述符进行指向变更")]),t._v(" "),e("h3",{attrs:{id:"_4-执行命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-执行命令"}},[t._v("#")]),t._v(" 4. 执行命令")]),t._v(" "),e("ul",[e("li",[t._v("builtin 命令，直接执行")]),t._v(" "),e("li",[t._v("非 builtin 命令，使用 "),e("code",[t._v("$PATH")]),t._v(" 查找，然后启动子进程执行")])]),t._v(" "),e("h3",{attrs:{id:"_5-命令执行完成后-收集状态并返回"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-命令执行完成后-收集状态并返回"}},[t._v("#")]),t._v(" 5. 命令执行完成后，收集状态并返回")]),t._v(" "),e("p",[e("img",{attrs:{src:a(481),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),e("p",[t._v("所有的程序，包括 Shell 启动的程序运行时都可以访问的变量就是环境变量。在 shell 脚本中使用 "),e("code",[t._v("export")]),t._v(" 可以定义环境变量，但是只在当前运行的 shell 进程中有效，结束进程就没了。如果想持久化，需要将环境变量定义在一些列配置文件中。")]),t._v(" "),e("p",[t._v("配置文件的加载顺序和 shell 进程是否运行在 Interactive 和 Login 模式有关。")]),t._v(" "),e("h3",{attrs:{id:"交互和非交互模式-interactive-non-interactive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#交互和非交互模式-interactive-non-interactive"}},[t._v("#")]),t._v(" 交互和非交互模式（Interactive & Non-Interactive）")]),t._v(" "),e("ul",[e("li",[t._v("Interactive 模式：通常是指读写数据都是从用户的命令行终端（terminal），用户输入命令，并在回车后立即执行的 shell。")]),t._v(" "),e("li",[t._v("Non-Interactive 模式：通常是指执行一个 shell 脚本，或 "),e("code",[t._v("bash -c")]),t._v(" 执行命令")])]),t._v(" "),e("p",[t._v("检测当前 shell 运行的环境是不是 Interactive 模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[[ $- == *i* ]] && echo "Interactive" || echo "Non-interactive"\n')])])]),e("h3",{attrs:{id:"登录和非登录模式-login-non-login"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#登录和非登录模式-login-non-login"}},[t._v("#")]),t._v(" 登录和非登录模式（Login & Non-Login）")]),t._v(" "),e("ul",[e("li",[t._v("Login 模式：应用在终端登陆时，ssh 连接时，"),e("code",[t._v("su --login <username>")]),t._v(" 切换用户时，指的是用户成功登录后开启的 Shell 进程，此时会读取 "),e("code",[t._v("/etc/passwd")]),t._v(" 下用户所属的 shell 执行。")]),t._v(" "),e("li",[t._v("Non-Login 模式：应用在直接运行 bash 时，su "),e("code",[t._v("<username>")]),t._v(" 切换用户时（前面没有加 --login）。指的是非登录用户状态下开启的 shell 进程。")])]),t._v(" "),e("p",[t._v("检测当前 shell 运行的环境是不是 Login 模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('shopt -q login_shell && echo "Login shell" || echo "Not login shell"\n\n#如果是zsh，没有shopt命令\n[[ -o login ]] && echo "Login shell" || echo "Not login shell"\n')])])]),e("p",[t._v("进入 bash 交互模式时也可以用 "),e("code",[t._v("--login")]),t._v(" 参数来决定是否是登录模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$> bash\n$> shopt -q login_shell && echo "Login shell" || echo "Not login shell"\nNot login shell\n$> exit\n$> bash --login\n$> shopt -q login_shell && echo "Login shell" || echo "Not login shell"\nLogin shell\n$> exit\n')])])]),e("p",[t._v("Login 模式模式下可以用 logout 和 exit 退出，Non-Login 模式下只能用 exit 退出。")]),t._v(" "),e("h3",{attrs:{id:"配置文件-启动文件-加载顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件-启动文件-加载顺序"}},[t._v("#")]),t._v(" 配置文件（启动文件）加载顺序")]),t._v(" "),e("p",[t._v("bash 支持的配置文件有 /etc/profile、~/.bash.rc 等。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(482),alt:"配置文件加载顺序"}})]),t._v(" "),e("p",[t._v("如上图加载顺序所示")]),t._v(" "),e("ul",[e("li",[t._v("Interactive&Login 模式：/etc/profile —>( ~/.bash_profile, ~/.bash_login, ~/.profile)其中之一 （应该还包括 -> ~/.bashrc -> /etc/bashrc）—>~/.bash_loginout(退出 shell 时调用)")]),t._v(" "),e("li",[t._v("Interactive&Non-Login 模式：/etc/bash.bashrc —>~/.bashrc")]),t._v(" "),e("li",[t._v("Non-Interactive 模式：通常就是执行脚本（script）的时候，此时配置项是从环境变量中读取和执行的，也就是 "),e("code",[t._v("env")]),t._v(" 或者 "),e("code",[t._v("printenv")]),t._v(" 命令输出的配置项。")])]),t._v(" "),e("p",[e("strong",[t._v("现在的系统一般都没有 ~/.bash_profile 文件了，只保留 ~/.bashrc 文件,所有的系统里，~/.bash_profile 都会有这样的逻辑，避免登陆时 ~/.bashrc 被跳过的情况：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# login shell will execute this\nif [ -n "$BASH_VERSION" ]; then\n\t# include .bashrc if it exists\n\tif [ -f "$HOME/.bashrc" ]; then\n\t\t. "$HOME/.bashrc"\n\tfi\nfi\n')])])]),e("p",[t._v("在发行版的 Linux 系统中，Interactive&Login 模式下的 ~/.bash_profile, ~/.bash_login， ~/.profile 并不一定是三选一，看一下这三个脚本的内容会发现他们会继续调用下一个它想调用的配置文件，这样就可以避免配置项可能需要在不同的配置文件多次配置。如 centos7.2 中 ~/.bash_profile 文件中实际调用了 ~/.bashrc 文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n\t. ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\nexport PATH\n")])])]),e("p",[e("img",{attrs:{src:a(483),alt:""}})]),t._v(" "),e("p",[t._v("如上图所示，开启一个 Shell 进程时，有一些参数的值也会影响到配置文件的加载。如"),e("code",[t._v("--rcfile")]),t._v("，"),e("code",[t._v("--norc")]),t._v(" 等。")]),t._v(" "),e("p",[t._v("常用的 shell 环境变量：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("变量名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$PATH")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("命令搜索路径，以冒号为分隔符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$HOME")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("用户主目录的路径名，是 cd 命令的默认参数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$SHELL")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("当前运行的 Shell 的全路径名")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$TERM")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("终端类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$LOGNAME")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("当前的登录名")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$PWD")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("当前工作目录")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#输出个别的环境变量值的两种方式\n\nprintenv HOME\n\necho $HOME\n")])])]),e("p",[t._v("全局变量是对所有用户都需要使用的变量，可以将新的变量或修改过的变量设置放在"),e("code",[t._v("/etc/profile")]),t._v("文件中，但升级了发行版该文件也会更新，所以这点要注意 （对所有用户）。")]),t._v(" "),e("p",[t._v("最好是在"),e("code",[t._v("/etc/profile.d")]),t._v("目录中创建一个以"),e("code",[t._v(".sh")]),t._v("结尾的文件，把所有新的变量或修改过的变量全部放在此文件中（对所有用户）。")]),t._v(" "),e("p",[t._v("对于存储个人用户永久性 bash shell 变量的地方是"),e("code",[t._v("$HOME/.bashrc")]),t._v("文件。这一点适用于所有类型的 Shell 进程（仅对当前用户）。")]),t._v(" "),e("h2",{attrs:{id:"和-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" "),e("code",[t._v("$*")]),t._v(" 和 "),e("code",[t._v("$@")]),t._v(" 的区别")]),t._v(" "),e("p",[e("code",[t._v("$*")]),t._v(" 和 "),e("code",[t._v("$@")]),t._v(" 都表示传递给函数或脚本的所有参数，不被双引号"),e("code",[t._v('""')]),t._v("包含时，都是以"),e("code",[t._v('"$1" "$2" ... "\\$n"')]),t._v("形式把所有参数一个一个单独输出。")]),t._v(" "),e("p",[t._v("但是当他们被双引号包含是，"),e("code",[t._v('"$*"')]),t._v(" 会将所有的参数作为一个整体，以"),e("code",[t._v('"$1 $2 ... $n"')]),t._v("的形式输出所有参数。"),e("code",[t._v('"$@"')]),t._v(" 还是跟之前一样，把所有参数分开，一个一个的输出。")]),t._v(" "),e("p",[t._v("例如："),e("code",[t._v("./test.sh a b c d")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n#/bin/bash\n\necho "打印出没有引号的 $*"\nfor var in $*\ndo\necho "$var"\ndone\n#输出：打印出没有引号的 $*\n# a\n# b\n# c\n# d\n\necho "打印出有引号的 \\"$*\\""\nfor var in "$*"\ndo\necho "$var"\ndone\n#输出：打印出有引号的 "$*"\n# a b c d\n\n\necho "打印出没有引号的 $@"\nfor var in $@\ndo\necho "$var"\ndone\n#输出：打印出没有引号的 $@\n# a\n# b\n# c\n# d\n\necho "打印出有引号的 \\"$@\\""\nfor var in "$@"\ndo\necho "$var"\ndone\n#输出：打印出有引号的 "$@"\n# a\n# b\n# c\n# d\n')])])]),e("h2",{attrs:{id:"shell-中的替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-中的替换"}},[t._v("#")]),t._v(" Shell 中的替换")]),t._v(" "),e("h3",{attrs:{id:"转义字符替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转义字符替换"}},[t._v("#")]),t._v(" 转义字符替换")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("echo")]),t._v(" 命令时，使用 "),e("code",[t._v("-e")]),t._v(" 可以对转义字符进行替换。使用 "),e("code",[t._v("-E")]),t._v(" 可以禁止转义，默认也是不转义的；使用 "),e("code",[t._v("-n")]),t._v(" 选项可以禁止插入换行符。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("转义字符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("退格（删除键）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\f")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("换页（FF），将当前位置移到下页开头")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\n")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("换行")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\c")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("显示不换行")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\r")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("回车")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\t")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("水平制表符（tab 键）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\v")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("垂直制表符")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n#/bin/bash\n\na=1\nb=2\n\necho -e "${a}\\n${b}" #输出：1\n\n# 2\n\n')])])]),e("h3",{attrs:{id:"命令替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令替换"}},[t._v("#")]),t._v(" 命令替换")]),t._v(" "),e("p",[t._v("命令替换是指 Shell 可以先执行命令，将输出结果暂时保存，在适当的地方输出。")]),t._v(" "),e("p",[t._v("命令替换的语法是：反引号 ``。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n#!/bin/bash\n\nDATE=`date`\necho "日期是：\\$DATE" #输出：日期是：Sun Oct 18 16:27:42 CST 2020\n\n')])])]),e("h2",{attrs:{id:"和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" () 和 (())")]),t._v(" "),e("h3",{attrs:{id:"先说一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先说一下"}},[t._v("#")]),t._v(" 先说一下 ()")]),t._v(" "),e("p",[t._v("在 bash 中，"),e("code",[t._v("$()")]),t._v("与 ``（反引号）都是用来作命令替换的。先完成引号里的命令行，然后将其结果替换出来，再重组成新的命令行。")]),t._v(" "),e("p",[t._v("相同点："),e("code",[t._v("$()")]),t._v(" 与 `` 在操作上，这两者都是达到相应的效果")]),t._v(" "),e("p",[t._v("不同点：")]),t._v(" "),e("p",[t._v("`` 很容易与''搞混乱，尤其对初学者来说。")]),t._v(" "),e("p",[t._v("而"),e("code",[t._v("$()")]),t._v(" 比较直观；不过 "),e("code",[t._v("$()")]),t._v(" 有兼容性问题，有些类 Unix 系统不支持。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("echo $(expr 1 + 2)\n")])])]),e("h3",{attrs:{id:"再说"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#再说"}},[t._v("#")]),t._v(" 再说 (())")]),t._v(" "),e("p",[t._v("1、(()) 可直接用于整数计算")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("echo $((1 + 2))\n")])])]),e("p",[t._v("2、(()) 可重新定义变量值，用于判断条件或计算等")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#!/bin/bash\n\na=10\nb=50\n\n((a++))\necho $a\n#输出：11\n\n((a > b)) && echo "a > b"\n\n((a < b)) && echo "a < b"\n\n# 输出：a < b\n')])])]),e("p",[t._v("3、(()) 可用于进制转换")]),t._v(" "),e("p",[t._v("$(())可以将其他进制转成十进制数显示出来。语法："),e("code",[t._v("$((N#xx))")]),t._v("，其中，N 为进制，xx 为该进制下某个数值，命令执行后可以得到该进制数转成十进制后的值。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("echo $((2#110))\n#输出：6\necho $((8#11))\n#输出：9\necho $((16#1a))\n#输出：26\n")])])]),e("h2",{attrs:{id:"test-、-和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-、-和"}},[t._v("#")]),t._v(" test 、[] 和 [[]]")]),t._v(" "),e("p",[t._v("type 命令检查")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('type "test" "[" "[["\n#输出：\n#test is a shell builtin\n#[ is a shell builtin\n#[[ is a reserved word\n')])])]),e("p",[t._v("从上面可以看出，"),e("code",[t._v("test")]),t._v("和"),e("code",[t._v("[")]),t._v("属于 Shell 的内置命令，"),e("code",[t._v("[[")]),t._v("属于 Shell 的保留关键字。")]),t._v(" "),e("p",[t._v("在使用上，"),e("code",[t._v("test")]),t._v("和"),e("code",[t._v("[")]),t._v("是等价的，因为是命令，所以需要跟它的参数使用空格隔开。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("test -f /etc/hosts && echo True\n#输出：True\n\n[ -f /etc/hosts ] && echo True\n#输出：True\n")])])]),e("p",[t._v("因为 "),e("code",[t._v("]")]),t._v(" 作为最后一个参数表示条件结束，而像"),e("code",[t._v("<")]),t._v("、"),e("code",[t._v(">")]),t._v("符号会被理解为重定向，且重定向优先级高于命令的优先级，所以下面的例子，会解析为 [1] < 2，并且 2 文件没有，导致错误")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[ 1 < 2 ]\n#输出：line 13: 2: No such file or directory\n")])])]),e("p",[e("code",[t._v("[[")]),t._v("是关键字，能够按照常规的语义理解其中的内容，双中括号中的表达式看作一个单独的语句，并返回其状态码。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[[ 1 < 2 ]] && echo True || echo False\n#输出：True\n")])])]),e("p",[t._v("推荐使用"),e("code",[t._v("[[")]),t._v(" 来进行各种判断，可以避免很多错误。")]),t._v(" "),e("p",[t._v("如下展示单中括号会引发的错误")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[ $a == 1 && $b == 1 ] && echo True || echo False\n#输出：[: missing `]'\n\n#例如$a为空，就会报语法错误，因为 [ 命令拿到的实际上只有 ==、1、] 三个参数\n[ $a == 1 ]\n#输出：[: ==: unary operator expected\n")])])]),e("h4",{attrs:{id:"中括号中的变量-最好都是用引号括起来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中括号中的变量-最好都是用引号括起来"}},[t._v("#")]),t._v(" 中括号中的变量，最好都是用引号括起来")]),t._v(" "),e("h2",{attrs:{id:"here-document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#here-document"}},[t._v("#")]),t._v(" Here Document")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://tldp.org/LDP/abs/html/here-docs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Here Document"),e("OutboundLink")],1),t._v(" 可以理解为“嵌入文档”。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本形式如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\ncommand <<delimiter\ndocument\ndelimiter\n\n")])])]),e("p",[t._v("作用是将两个 delimiter 之间的内容(document)作为输入传递给 command。")]),t._v(" "),e("p",[e("strong",[t._v("注意：")])]),t._v(" "),e("ul",[e("li",[t._v("结尾的 delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。")]),t._v(" "),e("li",[t._v("开始的 delimiter 前后的空格会被忽略掉。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#!/bin/bash\n\nwc -l << EOF\nline 1\nline 2\nline 3\nEOF #输出：3\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);