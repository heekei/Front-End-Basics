(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{631:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"decorator-装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decorator-装饰器"}},[t._v("#")]),t._v(" decorator 装饰器")]),t._v(" "),a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),a("h3",{attrs:{id:"面向切面编程-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向切面编程-aop"}},[t._v("#")]),t._v(" 面向切面编程（AOP）")]),t._v(" "),a("p",[t._v("AOP 即面向切面编程（Aspect Oriented Programming）")]),t._v(" "),a("p",[t._v("类似于“洋葱模型”，AOP 主要意图是将日志记录，性能统计，安全控制，异常处理等代码从业务逻辑代码种抽离出来，将它们独立到非核心业务逻辑的方法中，进而达到改变这些功能行为的时候不会影响核心业务逻辑的代码。")]),t._v(" "),a("p",[t._v("简而言之：就是“优雅”的把“辅助功能逻辑”从“核心业务逻辑”中分离、解耦出来。")]),t._v(" "),a("h3",{attrs:{id:"控制反转-ioc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-ioc"}},[t._v("#")]),t._v(" 控制反转（IoC）")]),t._v(" "),a("p",[t._v("IoC 即 控制反转（Inversion of Control） 是解耦的一种设计模式。")]),t._v(" "),a("p",[t._v("在传统的程序设计中，我们的代码直接控制所有的流程和对象的创建。而采用 IoC 后，这种控制权被反转了，意味着对象的创建和流程的控制不是由我们的代码直接管理，而是交给外部的容器或框架来处理。")]),t._v(" "),a("p",[t._v("AOP 可以通过 IoC 容器来实现。")]),t._v(" "),a("h3",{attrs:{id:"依赖注入-di"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入-di"}},[t._v("#")]),t._v(" 依赖注入（DI）")]),t._v(" "),a("p",[t._v("DI 即 依赖注入（Dependency Injection），是 IoC 的一种具体实现。")]),t._v(" "),a("p",[t._v("依赖注入允许我们的代码在运行时接收它的依赖项，而不是硬编码它们，从而提高了代码的模块化和可测试性。")]),t._v(" "),a("h3",{attrs:{id:"属性描述符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符"}},[t._v("#")]),t._v(" 属性描述符")]),t._v(" "),a("p",[a("code",[t._v("Object.defineProperty(obj, props, descriptor)")]),t._v(" 的作用是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。该方法接收三个参数：")]),t._v(" "),a("ul",[a("li",[t._v("要定义属性的对象（obj）")]),t._v(" "),a("li",[t._v("要定义或修改的属性名或 "),a("code",[t._v("Symbol")]),t._v(" （props）")]),t._v(" "),a("li",[t._v("要定义或修改的属性描述符（descriptor）")])]),t._v(" "),a("h4",{attrs:{id:"属性描述符有两种主要形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符有两种主要形式"}},[t._v("#")]),t._v(" 属性描述符有两种主要形式")]),t._v(" "),a("ul",[a("li",[t._v("数据描述符：是一个具有值的属性（value），该值可以是可写的，也可以是不可写的（writable）")]),t._v(" "),a("li",[t._v("存取描述符：由 getter 函数和 setter 函数所描述的属性。")])]),t._v(" "),a("p",[t._v("一个属性描述符只能是这两者种的其中一种，不能同时是两者。")]),t._v(" "),a("h4",{attrs:{id:"共享的属性描述符键值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享的属性描述符键值"}},[t._v("#")]),t._v(" 共享的属性描述符键值")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("configurable")]),t._v("：属性是否可以被删除或者是否可以再次修改其属性描述符，默认值为 "),a("code",[t._v("false")]),t._v(" "),a("ul",[a("li",[t._v("如果 configurable 设置为 true，则该属性的描述符可以被改变，也可以从所属对象上删除该属性。")]),t._v(" "),a("li",[t._v("如果 configurable 设置为 false，则除了直接修改属性的值和修改其 writable 属性为 false 之外，不能做其他修改。也就是说，一旦属性被设置为不可配置（configurable: false），就不能再将它变回可配置的了。")])])]),t._v(" "),a("li",[a("code",[t._v("enumerable")]),t._v("：属性是否会出现在对象的枚举属性种，默认值为 "),a("code",[t._v("false")])])]),t._v(" "),a("h4",{attrs:{id:"数据描述符特有键值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据描述符特有键值"}},[t._v("#")]),t._v(" 数据描述符特有键值")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("value")]),t._v("：该属性对应的值，默认值为 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[a("code",[t._v("writable")]),t._v("：属性是否可以被修改，默认值是 "),a("code",[t._v("false")])])]),t._v(" "),a("h4",{attrs:{id:"存取描述符特有键值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存取描述符特有键值"}},[t._v("#")]),t._v(" 存取描述符特有键值")]),t._v(" "),a("ul",[a("li",[t._v("get：一个给属性提供 getter 的方法。当访问该属性时，会调用此方法，并返回其返回值。默认为 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("set：一个给属性提供 setter 的方法。当属性值被修改时，会调用此方法，该方法将接收唯一的参数，即该属性的新值。默认为 "),a("code",[t._v("undefined")])])]),t._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("h3",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),a("p",[t._v("装饰器模式（Decorator Pattern）是一种抽象的设计模式，核心思想是"),a("strong",[t._v("在不修改原有代码情况下，对功能进行扩展")])]),t._v(" "),a("h4",{attrs:{id:"遵循的设计模式原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遵循的设计模式原则"}},[t._v("#")]),t._v(" 遵循的设计模式原则")]),t._v(" "),a("ol",[a("li",[t._v("单一职责原则")]),t._v(" "),a("li",[t._v("开闭原则")])]),t._v(" "),a("h3",{attrs:{id:"装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),a("p",[t._v("装饰器（Decorator）是一种特殊的装饰类函数，是一种对装饰器模式理念的具体实现。")]),t._v(" "),a("p",[t._v("它接受一个函数或类作为参数，并返回一个已经被修改或增强功能的函数或类的版本")]),t._v(" "),a("h3",{attrs:{id:"装饰器工厂函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器工厂函数"}},[t._v("#")]),t._v(" 装饰器工厂函数")]),t._v(" "),a("p",[t._v("装饰器工厂函数是返回一个装饰器的函数。这使得装饰器可以接受参数，因此可以在不同的场景下提供更多的灵活性。装饰器工厂函数先执行，其返回值（一个装饰器函数）随后应用于目标函数或类。")]),t._v(" "),a("h3",{attrs:{id:"装饰器语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器语法"}},[t._v("#")]),t._v(" 装饰器语法")]),t._v(" "),a("p",[a("code",[t._v("@decorator")]),t._v(" 装饰器语法是一种便捷的语法糖，通过 "),a("code",[t._v("@")]),t._v(" 来引用，需要编译后才能进行。")]),t._v(" "),a("h2",{attrs:{id:"装饰器用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器用法"}},[t._v("#")]),t._v(" 装饰器用法")]),t._v(" "),a("p",[t._v("装饰器语法"),a("code",[t._v("@decorator")]),t._v("，不过目前还处于第 2 阶段提案中，使用它之前需要使用 TypeScript 或 Babel 模块编译成 ES5 或 ES6。")]),t._v(" "),a("h3",{attrs:{id:"类装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类装饰器"}},[t._v("#")]),t._v(" 类装饰器")]),t._v(" "),a("h4",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 类装饰器\nfunction classDecorator(target) {\n  return // ...\n};\n")])])]),a("ul",[a("li",[t._v("参数：接受一个参数\n"),a("ul",[a("li",[t._v("target：类的构造器")])])]),t._v(" "),a("li",[t._v("返回值：如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明")])]),t._v(" "),a("h4",{attrs:{id:"适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),a("ul",[a("li",[t._v("给当前类添加一些属性和方法")]),t._v(" "),a("li",[t._v("继承当前类，并进行扩展")])]),t._v(" "),a("h4",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("p",[t._v("可以添加一个 addToJsonString 方法给所有的类来新增一个 toString 方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function addToJsonString(target) {\n  return class extends target {\n    toJsonString() {\n      return JSON.stringify(this)\n    }\n  }\n}\n\n@addToJsonString\nclass Demo {\n  one = 1\n  two = 2\n}\n\nconsole.log(new Demo().toJsonString()) // {"one":1,"two":2}\n')])])]),a("h3",{attrs:{id:"方法装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法装饰器"}},[t._v("#")]),t._v(" 方法装饰器")]),t._v(" "),a("h4",{attrs:{id:"语法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-2"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 方法装饰器\nfunction methodDecorator(target, propertyKey, descriptor) {\n  return // ...\n};\n")])])]),a("ul",[a("li",[t._v("参数\n"),a("ul",[a("li",[t._v("target: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链")]),t._v(" "),a("li",[t._v("propertyKey: 属性的名称")]),t._v(" "),a("li",[t._v("descriptor: 属性的描述器")])])]),t._v(" "),a("li",[t._v("返回值：如果返回了值，它会被用于替代属性的描述器。")])]),t._v(" "),a("h4",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),a("p",[t._v("方法装饰器可以实现与 "),a("strong",[t._v("Before / After")]),t._v(" 钩子 相关的场景功能。")]),t._v(" "),a("h4",{attrs:{id:"举例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-2"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function logTime(target, key, descriptor) {\n  const oldMethed = descriptor.value\n  const logTime = function (...arg) {\n    let start = +new Date()\n    try {\n      return oldMethed.apply(this, arg) // 调用之前的函数\n    } finally {\n      let end = +new Date()\n      console.log(`耗时: ${end - start}ms`)\n    }\n  }\n  descriptor.value = logTime\n  return descriptor\n}\n\nclass Demo {\n  @logTime\n  run() {\n    console.log('start')\n  }\n}\n\nconsole.log(new Demo().run())\n// start\n// 耗时: 14ms\n")])])]),a("h3",{attrs:{id:"属性装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性装饰器"}},[t._v("#")]),t._v(" 属性装饰器")]),t._v(" "),a("h4",{attrs:{id:"语法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-3"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[t._v("语法跟方法装饰器类似，只不过不要随意修改 decorator 的 value，因为属性装饰器会在代码运行前生效，所以修改了 value 可能不会生效。")]),t._v(" "),a("h4",{attrs:{id:"使用场景-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),a("p",[t._v("修改属性的描述符")]),t._v(" "),a("h4",{attrs:{id:"举例-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-3"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function readonly(target, name, descriptor) {\n  descriptor.writable = false\n  return descriptor\n}\n\nclass Person {\n  @readonly\n  name = 'zhangsan'\n}\n\nconst person = new Person()\nconsole.log(person.name, Object.getOwnPropertyDescriptor(person, 'name'))\n// zhangsan {value: 'zhangsan',writable: false,enumerable: true,configurable: true}\n")])])]),a("h3",{attrs:{id:"访问器装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问器装饰器"}},[t._v("#")]),t._v(" 访问器装饰器")]),t._v(" "),a("h4",{attrs:{id:"语法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-4"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[t._v("语法跟方法装饰器类似，唯一的区别在于第三个参数 descriptor 描述器中有的 key 不同：")]),t._v(" "),a("p",[t._v("方法装饰器的描述符的 key 为：")]),t._v(" "),a("ul",[a("li",[t._v("value")]),t._v(" "),a("li",[t._v("writable")]),t._v(" "),a("li",[t._v("enumerable")]),t._v(" "),a("li",[t._v("configurable")])]),t._v(" "),a("p",[t._v("访问器装饰器的描述符的 key 为：")]),t._v(" "),a("ul",[a("li",[t._v("get")]),t._v(" "),a("li",[t._v("set")]),t._v(" "),a("li",[t._v("enumerable")]),t._v(" "),a("li",[t._v("configurable")])]),t._v(" "),a("h4",{attrs:{id:"使用场景-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-3"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),a("p",[t._v("可以在某个属性赋值的时候做加一层代理")]),t._v(" "),a("h4",{attrs:{id:"举例-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-4"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 装饰器工厂函数\nfunction addExtraNumber(num) {\n  // 返回的函数才是真正的装饰器\n  return function (target, propertyKey, descriptor) {\n    const original = descriptor.set\n\n    descriptor.set = function (value) {\n      const number = value + num\n      return original.call(this, number)\n    }\n  }\n}\n\nclass Demo {\n  x = 1\n  @addExtraNumber(2)\n  set number(num) {\n    this.x = num\n  }\n  get number() {\n    return this.x\n  }\n}\nconst test = new Demo()\ntest.number = 10\nconsole.log(test.number) // 12\n\n")])])]),a("h3",{attrs:{id:"参数装饰器-typescript-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数装饰器-typescript-实现"}},[t._v("#")]),t._v(" 参数装饰器（TypeScript 实现）")]),t._v(" "),a("h4",{attrs:{id:"语法-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-5"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 参数装饰器\nfunction parameterDecorator(target, methedKey, parameterIndex) {\n\n}\n")])])]),a("ul",[a("li",[a("p",[t._v("参数：接收三个参数")]),t._v(" "),a("ul",[a("li",[t._v("target: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链")]),t._v(" "),a("li",[t._v("methedKey: 方法的名称，注意！是方法的名称，而不是参数的名称")]),t._v(" "),a("li",[t._v("parameterIndex: 参数在方法中所处的位置的下标")])])]),t._v(" "),a("li",[a("p",[t._v("返回：返回的值将会被忽略")])])]),t._v(" "),a("h4",{attrs:{id:"使用场景-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-4"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),a("p",[t._v("单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。")]),t._v(" "),a("h4",{attrs:{id:"举例-需要-typescript-编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-需要-typescript-编译"}},[t._v("#")]),t._v(" 举例（需要 TypeScript 编译）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function Log(target, methedKey, parameterIndex) {\n  console.log(`方法名称 ${methedKey}`);\n  console.log(`参数顺序 ${parameterIndex}`);\n}\n\nclass GuanYu {\n  attack(@Log person, @Log dog) {\n    console.log(`向 ${person} 挥了一次大刀`)\n  }\n}\n\n// [LOG]: "方法名称 attack"\n// [LOG]: "参数顺序 0"\n')])])]),a("h2",{attrs:{id:"装饰器的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的实现原理"}},[t._v("#")]),t._v(" 装饰器的实现原理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Demo {\n  run() {\n    console.log('start')\n  }\n}\n")])])]),a("p",[t._v("给 run 方法增加耗时计算")]),t._v(" "),a("h3",{attrs:{id:"硬编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#硬编码"}},[t._v("#")]),t._v(" 硬编码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("耗时: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("ms")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("硬编码存在的问题：")]),t._v(" "),a("ul",[a("li",[t._v("理解成本高：统计耗时的相关代码与函数本身逻辑并无关系，对函数结构造成了破坏性的修改，影响到了对原函数本身的理解")]),t._v(" "),a("li",[t._v("维护成本高：如果后期还有更多类似的函数需要添加统计耗时的代码，在每个函数中都添加这样的代码非常低效，也大大提高了维护成本")])]),t._v(" "),a("h3",{attrs:{id:"手动实现装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动实现装饰器模式"}},[t._v("#")]),t._v(" 手动实现装饰器模式")]),t._v(" "),a("h4",{attrs:{id:"核心思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心思路"}},[t._v("#")]),t._v(" 核心思路")]),t._v(" "),a("ul",[a("li",[t._v("Step1 备份原来类构造器 (Class.prototype) 的属性描述符 (Descriptor)\n"),a("ul",[a("li",[t._v("利用 Object.getOwnPropertyDescriptor 获取")])])]),t._v(" "),a("li",[t._v("Step2 编写装饰器函数逻辑代码\n"),a("ul",[a("li",[t._v("利用执行原函数前后钩子，添加耗时统计逻辑")])])]),t._v(" "),a("li",[t._v("Step3 用装饰器函数覆盖原来属性描述符的 value\n"),a("ul",[a("li",[t._v("利用 Object.defineProperty 代理")])])]),t._v(" "),a("li",[t._v("Step4 手动执行装饰器函数，装饰 Class(类) 指定属性\n"),a("ul",[a("li",[t._v("从而实现在不修改原代码的前提下，执行额外逻辑代码")])])])]),t._v(" "),a("h4",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decoratorLogTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step1 备份原来类原型对象上的属性描述符 Descriptor")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldDescriptor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldFun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldDescriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step2 编写装饰器函数逻辑代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("logTime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Before 钩子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("oldFun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用原函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// After 钩子")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("耗时: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("ms")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step3 将装饰器覆盖原来的属性描述符的 value")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("oldDescriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" logTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step4 手动执行装饰器函数，装饰 Demo 的 run 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decoratorLogTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'run'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"手动实现的装饰器需要优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动实现的装饰器需要优化"}},[t._v("#")]),t._v(" 手动实现的装饰器需要优化")]),t._v(" "),a("ol",[a("li",[t._v("是否可以让装饰器更加关注业务逻辑？Step 1 和 Step3 是通用逻辑，每个装饰器都需要实现，可以抽离复用")]),t._v(" "),a("li",[t._v("是否可以让装饰器写法更简单？纯函数实现的装饰器，每装饰一个属性都要手动执行装饰器函数，详见 Step4 步骤。")])]),t._v(" "),a("p",[t._v("针对上述优化点，装饰器草案中提出了装饰器语法糖，也就是 @Decorator ，只需要在想使用的装饰器前加上@符号，装饰器就会被应用到目标上。")]),t._v(" "),a("h3",{attrs:{id:"装饰器语法糖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器语法糖"}},[t._v("#")]),t._v(" 装饰器语法糖")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step2 编写装饰器函数业务逻辑代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldMethed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" descriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("logTime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("oldMethed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用之前的函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("耗时: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("ms")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  descriptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" logTime\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" descriptor\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Step4 利用 @ 语法糖装饰指定属性")]),t._v("\n  @logTime\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"装饰器的执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的执行顺序"}},[t._v("#")]),t._v(" 装饰器的执行顺序")]),t._v(" "),a("h3",{attrs:{id:"同种装饰器组合顺序-洋葱模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同种装饰器组合顺序-洋葱模型"}},[t._v("#")]),t._v(" 同种装饰器组合顺序：洋葱模型")]),t._v(" "),a("p",[t._v("如果同一个方法有多个装饰器，其执行顺序是怎样的？")]),t._v(" "),a("p",[t._v("答案：以方法装饰器为例，同种装饰器组合后，其顺序会像剥洋葱一样，先从外到内进入，然后由内向外执行。和 Koa 的中间件顺序类似。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'装饰器初始化'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'装饰器执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 装饰器初始化 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 装饰器初始化 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 装饰器执行 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 装饰器执行 1")]),t._v("\n")])])]),a("h3",{attrs:{id:"不同类型装饰器顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同类型装饰器顺序"}},[t._v("#")]),t._v(" 不同类型装饰器顺序")]),t._v(" "),a("ol",[a("li",[t._v("参数装饰器先执行，按照其被应用到的方法参数从最后一个到第一个依次执行。")]),t._v(" "),a("li",[t._v("方法装饰器和属性装饰器接着执行，按照它们声明的顺序从上到下执行。")]),t._v(" "),a("li",[t._v("类装饰器最后执行，如果有多个类装饰器，它们的执行顺序是从下到上（即与声明顺序相反）。")])]),t._v(" "),a("p",[t._v("值得注意的是，装饰器工厂函数的调用顺序和装饰器的执行顺序是不同的。工厂函数是在代码解析阶段就被调用的，而装饰器本身的执行是在所有工厂函数调用之后，按照上述规则进行的。")]),t._v(" "),a("h2",{attrs:{id:"装饰器的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的优缺点"}},[t._v("#")]),t._v(" 装饰器的优缺点")]),t._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("在不修改原有代码情况下，对功能进行扩展。也就是对扩展开放，对修改关闭。")]),t._v(" "),a("li",[t._v("优雅地把“辅助性功能逻辑”从“业务逻辑”中分离，解耦出来。（AOP 面向切面编程的设计理念）")]),t._v(" "),a("li",[t._v("装饰类和被装饰类可以独立发展，不会相互耦合")]),t._v(" "),a("li",[t._v("装饰模式是 Class 继承的一个替代模式，可以理解成组合")])]),t._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("p",[t._v("但是糖再好吃，也不要吃太多，容易坏牙齿的，滥用过多装饰器会导致很多问题：")]),t._v(" "),a("ul",[a("li",[t._v("理解成本：过多带业务功能的装饰器会使代码本身逻辑变得扑朔迷离")]),t._v(" "),a("li",[t._v("调试成本：装饰器层次增多，会增加调试成本，很难追溯到一个 Bug 是在哪一层包装导致的")])]),t._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("h4",{attrs:{id:"装饰器的功能逻辑代码一定是辅助性的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器的功能逻辑代码一定是辅助性的"}},[t._v("#")]),t._v(" 装饰器的功能逻辑代码一定是辅助性的")]),t._v(" "),a("p",[t._v("比如日志记录，性能统计等，这样才符合 AOP 面向切面编程的思想，如果把过多的业务逻辑写在了装饰器上，效果会适得其反。")]),t._v(" "),a("h5",{attrs:{id:"装饰器语法尚未定案以及未被纳入-es-标准-标准化的过程还需要很长时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器语法尚未定案以及未被纳入-es-标准-标准化的过程还需要很长时间"}},[t._v("#")]),t._v(" 装饰器语法尚未定案以及未被纳入 ES 标准，标准化的过程还需要很长时间")]),t._v(" "),a("h2",{attrs:{id:"阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阅读"}},[t._v("#")]),t._v(" 阅读")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/DexxNuRG-x29dZrWCcJDuQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Decorator 装饰器"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Lph9HRay6bJU_KzOjsW6Mg",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端装饰器模式快闪"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/jzLO37bKYwLlPlVXTnzPfQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文读懂 @Decorator 装饰器"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);