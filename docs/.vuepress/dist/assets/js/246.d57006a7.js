(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{711:function(t,s,a){"use strict";a.r(s);var e=a(25),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dockerfile-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-详解"}},[t._v("#")]),t._v(" dockerfile 详解")]),t._v(" "),s("h2",{attrs:{id:"什么是-dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dockerfile"}},[t._v("#")]),t._v(" 什么是 dockerfile?")]),t._v(" "),s("ul",[s("li",[t._v("Dockerfile 是 Docker 中用于定义镜像自动化构建流程的配置文件，Docker 通过读取 Dockerfile 中的指令自动生成镜像。")]),t._v(" "),s("li",[t._v("在 Dockerfile 中，包含了构建镜像过程中需要执行的命令和其他操作")])]),t._v(" "),s("h3",{attrs:{id:"docker-build"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-build"}},[t._v("#")]),t._v(" docker build")]),t._v(" "),s("p",[s("code",[t._v("docker build")]),t._v(" 命令用于从 Dockerfile 构建 Docker 镜像。它提供了许多参数来控制构建过程。这些参数允许指定上下文、给镜像打标签、设定构建的选项等。")]),t._v(" "),s("h4",{attrs:{id:"常用参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用参数"}},[t._v("#")]),t._v(" 常用参数")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[s("code",[t._v("-t, --tag")])]),t._v(": 为构建的镜像命名并打标签。")]),t._v(" "),s("ul",[s("li",[t._v("格式："),s("code",[t._v("<name>:<tag>")]),t._v("，其中 "),s("code",[t._v("<tag>")]),t._v(" 默认为 "),s("code",[t._v("latest")]),t._v("。")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v("docker build -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("-f, --file")])]),t._v(": 指定 Dockerfile 的路径。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build -f Dockerfile.dev .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--build-arg")])]),t._v(": 传递构建时的变量，这些变量在 Dockerfile 中可以通过 "),s("code",[t._v("ARG")]),t._v(" 指令引用。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --build-arg VERSION=1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--no-cache")])]),t._v(": 不使用缓存来构建镜像，强制每一层都重新构建。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --no-cache -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--rm")])]),t._v(": 构建成功后移除中间容器。默认是启用的，但可以使用 "),s("code",[t._v("--rm=false")]),t._v(" 禁用。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --rm -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--pull")])]),t._v(": 总是尝试从注册表拉取最新版本的基础镜像。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --pull -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--target")])]),t._v(": 设置多阶段构建的目标构建阶段。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --target build-env -t myapp:build .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("-q, --quiet")])]),t._v(": 安静模式，只输出镜像 ID。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build -q -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("-m, --memory")])]),t._v(": 设置构建过程中的内存限制。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build -m 2g -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--platform")])]),t._v(": 指定构建镜像的平台。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --platform linux/amd64 -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--network")])]),t._v(": 设置构建过程使用的网络模式。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --network host -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--build-context")])]),t._v(": 指定额外的构建上下文，用于 "),s("code",[t._v("COPY --from=<context>")]),t._v(" 语法。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --build-context base=dir:/path/to/context -t myapp:1.0 .")])])])]),t._v(" "),s("li",[s("p",[s("strong",[s("code",[t._v("--secret")])]),t._v(": 传递构建时的机密信息，比如 SSH 密钥。")]),t._v(" "),s("ul",[s("li",[t._v("示例："),s("code",[t._v("docker build --secret id=mysecret,src=/path/to/secret .")])])])])]),t._v(" "),s("h4",{attrs:{id:"基本示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本示例"}},[t._v("#")]),t._v(" 基本示例")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 构建 Docker 镜像，使用当前目录作为上下文，默认名称为 "latest"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用指定的 Dockerfile 构建镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:2.0 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" Dockerfile.production "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像并传递构建参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("VERSION")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:2.0 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建时不使用缓存")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build --no-cache "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:2.0 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建指定阶段的镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--target")]),t._v(" build-env "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:build "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定构建平台")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--platform")]),t._v(" linux/amd64 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:1.0 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("h4",{attrs:{id:"多阶段构建示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建示例"}},[t._v("#")]),t._v(" 多阶段构建示例")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建阶段")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" golang:1.18 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" build-env")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . .")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" go build -o myapp")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行阶段")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" alpine:latest")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token options"}},[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("--from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("build-env")])]),t._v(" /app/myapp /app/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./myapp"')]),t._v("]")]),t._v("\n")])])]),s("p",[t._v("对应的构建命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建最终的镜像（运行阶段）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:final "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建中间阶段的镜像（仅构建阶段）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--target")]),t._v(" build-env "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myapp:build "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("h4",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("缓存问题")]),t._v(": Docker 在构建时会缓存每一层，如果不希望使用缓存，可以使用 "),s("code",[t._v("--no-cache")]),t._v(" 参数。但要小心，因为重新构建每一层可能会大大增加构建时间。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Dockerfile 最佳实践")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("尽量减少镜像层数，合并类似的命令（如多个 "),s("code",[t._v("RUN")]),t._v(" 指令）。")]),t._v(" "),s("li",[t._v("使用多阶段构建来减小最终镜像的大小。")]),t._v(" "),s("li",[t._v("定期更新基础镜像以获得最新的安全修复。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("命名与标记")]),t._v(": 尽量为镜像添加有意义的标签（"),s("code",[t._v("<tag>")]),t._v("），便于版本管理和部署。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("构建上下文")]),t._v(": Docker 会将指定目录（上下文，默认为 "),s("code",[t._v(".")]),t._v(" 当前目录）中的所有内容发送到 Docker 守护进程，这可能包括不需要的文件。使用 "),s("code",[t._v(".dockerignore")]),t._v(" 文件来排除不必要的文件。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("安全性")]),t._v(": 在构建时传递机密信息（如密码、密钥）要特别小心，可以使用 "),s("code",[t._v("--secret")]),t._v(" 或 "),s("code",[t._v("--build-arg")]),t._v(" 来处理，但最好是避免在 Dockerfile 中直接包含这些信息。")])])]),t._v(" "),s("h4",{attrs:{id:"docker-build-原理示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-build-原理示例"}},[t._v("#")]),t._v(" docker build 原理示例")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/poloyy/p/15451933.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看文章中间镜像的构建过程"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"使用-dockerfile-构建镜像的步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-构建镜像的步骤"}},[t._v("#")]),t._v(" 使用 Dockerfile 构建镜像的步骤")]),t._v(" "),s("ul",[s("li",[t._v("编写一个 dockerfile 文件")]),t._v(" "),s("li",[t._v("docker build 构建成为一个镜像")]),t._v(" "),s("li",[t._v("docker run 运行镜像")]),t._v(" "),s("li",[t._v("docker push 发布镜像（DockerHub 、阿里云仓库）")])]),t._v(" "),s("h3",{attrs:{id:"dockerfile-规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-规范"}},[t._v("#")]),t._v(" Dockerfile 规范")]),t._v(" "),s("ul",[s("li",[t._v("每个保留关键字（指令）都是必须是大写字母")]),t._v(" "),s("li",[t._v("执行从上到下顺序")]),t._v(" "),s("li",[t._v("#表示注释")]),t._v(" "),s("li",[t._v("每一个指令都会创建提交一个新的镜像层，并提交")])]),t._v(" "),s("h3",{attrs:{id:"为什么要用-dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-dockerfile"}},[t._v("#")]),t._v(" 为什么要用 Dockerfile")]),t._v(" "),s("ul",[s("li",[t._v("Dockerfile 是面向开发的，以后要发布项目，做镜像，就需要编写 dockerfile 文件")]),t._v(" "),s("li",[t._v("DockerFile 构建镜像文件，定义了一切的步骤，源代码")]),t._v(" "),s("li",[t._v("Dockerfile 的体积小，容易进行快速迁移部署")]),t._v(" "),s("li",[t._v("环境构建流程记录在 Dockerfile 中，能够直观的看到镜像构建的顺序和逻辑-")])]),t._v(" "),s("h2",{attrs:{id:"dockerfile-的基本结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-的基本结构"}},[t._v("#")]),t._v(" Dockerfile 的基本结构")]),t._v(" "),s("p",[t._v("Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，"),s("code",[t._v("#")]),t._v("为 Dockerfile 中的注释。")]),t._v(" "),s("h2",{attrs:{id:"dockerfile-文件说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件说明"}},[t._v("#")]),t._v(" Dockerfile 文件说明")]),t._v(" "),s("p",[t._v("Docker 从上到下运行 Dockerfile 的指令。为了指定基本映像，"),s("strong",[t._v("第一条指令必须是 FROM")]),t._v("。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用 RUN，CMD，FROM，EXPOSE，ENV 等指令。")]),t._v(" "),s("h2",{attrs:{id:"常用的指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的指令"}},[t._v("#")]),t._v(" 常用的指令")]),t._v(" "),s("h3",{attrs:{id:"from-指明当前的镜像基于哪个镜像构建-必须为第一个命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from-指明当前的镜像基于哪个镜像构建-必须为第一个命令"}},[t._v("#")]),t._v(" "),s("strong",[t._v("FROM：")]),t._v(" 指明当前的镜像基于哪个镜像构建，必须为第一个命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nFROM [--platform=<platform>] <image> [AS <name>]\nFROM [--platform=<platform>] <image>[:<tag>] [AS <name>]\nFROM [--platform=<platform>] <image>[@<digest>] [AS <name>]\n示例：\nFROM mysql:5.6\n注：\ntag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像\n")])])]),s("p",[s("strong",[t._v("dockerfile 必须以 FROM 开头，不过 ARG 命令可以在 FROM 前面")])]),t._v(" "),s("h4",{attrs:{id:"一个-dockerfile-可以有多个-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个-dockerfile-可以有多个-from"}},[t._v("#")]),t._v(" 一个 dockerfile 可以有多个 FROM")]),t._v(" "),s("ul",[s("li",[t._v("可以有多个 FROM 来创建多个镜像，或区分构建阶段，将一个构建阶段作为另一个构建阶段的依赖项")]),t._v(" "),s("li",[t._v("AS "),s("name",[t._v(" 就是命名当前构建阶段")])],1),t._v(" "),s("li",[t._v("在后续构建阶段，可以给 FROM、COPY 指令用上，通过 --from="),s("name",[t._v(" 引用前面构建的镜像")])],1)]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一构建阶段:将仅用于生成 requirements.txt 文件")]),t._v("\nFROM tiangolo/uvicorn-gunicorn:python3.9 as requirements-stage\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前工作目录设置为 /tmp")]),t._v("\nWORKDIR /tmp\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 requirements.txt")]),t._v("\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" requirements.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二构建阶段，在这往后的任何内容都将保留在最终容器映像中")]),t._v("\nFROM python:3.9\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前工作目录设置为 /code")]),t._v("\nWORKDIR /code\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制 requirements.txt;这个文件只存在于前一个 Docker 阶段，这就是使用 --from-requirements-stage 复制它的原因")]),t._v("\nCOPY "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--from")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行命令")]),t._v("\nRUN pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --no-cache-dir "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--upgrade")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" /code/requirements.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制")]),t._v("\nCOPY ./app /code/app\n")])])]),s("h4",{attrs:{id:"arg-和-from-交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-和-from-交互"}},[t._v("#")]),t._v(" ARG 和 FROM 交互")]),t._v(" "),s("p",[t._v("FROM 指令支持由出现在第一个 FROM 之前的任何 ARG 指令声明的变量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ARG  CODE_VERSION=latest\nFROM base:${CODE_VERSION}\nCMD  /code/run-app\n\nFROM extras:${CODE_VERSION}\nCMD  /code/run-extras\n")])])]),s("p",[t._v("注意:")]),t._v(" "),s("ul",[s("li",[t._v("在 FROM 之前声明的 ARG 在构建阶段之外，因此不能在 FROM 之后的任何指令中使用")]),t._v(" "),s("li",[t._v("要使用在第一个 FROM 之前声明的 ARG 的默认值，要在构建阶段内声明一次没有值的 ARG 指令")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ARG VERSION=latest\nFROM busybox:$VERSION\nARG VERSION\nRUN echo $VERSION > image_version\n")])])]),s("h3",{attrs:{id:"maintainer-维护者信息-已弃用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maintainer-维护者信息-已弃用"}},[t._v("#")]),t._v(" "),s("strong",[t._v("MAINTAINER：")]),t._v(" 维护者信息（已弃用）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nMAINTAINER <name>\n示例：\nMAINTAINER Jasper Xu\nMAINTAINER sorex@163.com\nMAINTAINER Jasper Xu <sorex@163.com>\n")])])]),s("h3",{attrs:{id:"user-指定运行容器时的用户名或-uid-后续的-run-也会使用指定用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#user-指定运行容器时的用户名或-uid-后续的-run-也会使用指定用户"}},[t._v("#")]),t._v(" "),s("strong",[t._v("USER：")]),t._v(" 指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户")]),t._v(" "),s("ul",[s("li",[t._v("使用 USER 指定用户时，可以使用用户名、UID 或 GID，或是两者的组合")]),t._v(" "),s("li",[t._v("使用 USER 指定用户后，Dockerfile 中后续的命令 RUN、CMD、ENTRYPOINT 都将使用该用户")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nUSER user\nUSER user:group\nUSER uid\nUSER uid:gid\nUSER user:gid\nUSER uid:group\n\n示例：\nUSER www\n")])])]),s("h4",{attrs:{id:"也可以使用-docker-run-u-指定用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#也可以使用-docker-run-u-指定用户"}},[t._v("#")]),t._v(" 也可以使用 docker run -u 指定用户")]),t._v(" "),s("ul",[s("li",[t._v("替代默认设置的用户")]),t._v(" "),s("li",[t._v("可以使用 uid 来指定用户")])]),t._v(" "),s("p",[s("code",[t._v("docker run -i -t -u 1001 busybox sh")])]),t._v(" "),s("h3",{attrs:{id:"arg-定义创建镜像过程中使用的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-定义创建镜像过程中使用的变量"}},[t._v("#")]),t._v(" "),s("strong",[t._v("ARG：")]),t._v(" 定义创建镜像过程中使用的变量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nARG <name> [=<default value>]\n\n示例：\nARG site\nARG build_user=www\n")])])]),s("h4",{attrs:{id:"arg-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-详解"}},[t._v("#")]),t._v(" ARG 详解")]),t._v(" "),s("ul",[s("li",[t._v("在执行 docker build 时，可以通过 --build-arg <参数名>=<值> 来为声明的变量赋值")]),t._v(" "),s("li",[t._v("当镜像编译成功后，ARG 指定的变量将不再存在（ENV 指定的变量将在镜像中保留）")]),t._v(" "),s("li",[t._v("Docker 内置了一些镜像创建变量，用户可以直接使用而无须声明，包括（不区分大小写）HTTP_PROXY、HTTPS_PROXY、FTP_PROXY、NO_PROXY")]),t._v(" "),s("li",[t._v("不要通过 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的")])]),t._v(" "),s("h4",{attrs:{id:"arg-指令有生效范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-指令有生效范围"}},[t._v("#")]),t._v(" ARG 指令有生效范围")]),t._v(" "),s("h5",{attrs:{id:"如果在-from-指令之前指定-那么只能用于-from-指令中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果在-from-指令之前指定-那么只能用于-from-指令中"}},[t._v("#")]),t._v(" 如果在 FROM 指令之前指定，那么只能用于 FROM 指令中")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("ARG "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_USERNAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("library\n\nFROM "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")]),t._v("/alpine\n\nRUN "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-x")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 无法输出 ${DOCKER_USERNAME} 变量的值")]),t._v("\n")])])]),s("p",[t._v("使用上述 Dockerfile 会发现无法输出 ${DOCKER_USERNAME} 变量的值，要想正常输出，必须在 FROM 之后再次指定 ARG")]),t._v(" "),s("div",{staticClass:"language-Dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只在 FROM 中生效")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" DOCKER_USERNAME=library")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")]),t._v("/alpine")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要想在 FROM 之后使用，必须再次指定")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" DOCKER_USERNAME=library")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" set -x ; echo "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")])]),t._v("\n")])])]),s("h5",{attrs:{id:"多阶段构建的时候-arg-定义的变量-每个-from-都能用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建的时候-arg-定义的变量-每个-from-都能用"}},[t._v("#")]),t._v(" 多阶段构建的时候，ARG 定义的变量，每个 FROM 都能用")]),t._v(" "),s("div",{staticClass:"language-Dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个变量在每个 FROM 中都生效")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" DOCKER_USERNAME=library")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")]),t._v("/alpine")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" set -x ; echo 1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_USERNAME}")]),t._v("/alpine")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" set -x ; echo 2")]),t._v("\n")])])]),s("h3",{attrs:{id:"env-设置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env-设置环境变量"}},[t._v("#")]),t._v(" "),s("strong",[t._v("ENV：")]),t._v(" 设置环境变量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('两种格式\nENV<key><value> #<key>之后的所有内容均被视为其<value>组成部分，因此，一次只能设置一个变量\n\nENV <key>=<value>...#可以设置多个变量，每个变量为一个<key>=<value>键值对，，如果<key>中包含空格，可以使用\\来进行转义，也可以通过""来进行标示；另外，反斜线也可以用于续行\n\n示例：\nENV myName John Doe\nENV myCat=fluffy\n')])])]),s("h4",{attrs:{id:"使用环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用环境变量"}},[t._v("#")]),t._v(" 使用环境变量")]),t._v(" "),s("h5",{attrs:{id:"通过-env-指令可以声明环境变量-可以在以下指令中使用环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-env-指令可以声明环境变量-可以在以下指令中使用环境变量"}},[t._v("#")]),t._v(" 通过 ENV 指令可以声明环境变量，可以在以下指令中使用环境变量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ADD\nCOPY\nENV\nEXPOSE\nFROM\nLABEL\nSTOPSIGNAL\nUSER\nVOLUME\nWORKDIR\nONBUILD\n")])])]),s("h5",{attrs:{id:"使用环境变量的方式有两种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用环境变量的方式有两种"}},[t._v("#")]),t._v(" 使用环境变量的方式有两种")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$variable_name\n${variable_name}\n")])])]),s("p",[t._v("${variable_name} 语法还支持以下指定的一些标准 bash 修饰符：")]),t._v(" "),s("ul",[s("li",[t._v("${variable:-word}：表示如果设置了 variable，那么结果就是那个值；如果未设置变量，则结果将是 word")]),t._v(" "),s("li",[t._v("${variable:+word}：表示如果设置了 variable，则结果为 word，否则为空字符串")]),t._v(" "),s("li",[t._v("在所有情况下， word 可以是任何字符串，包括额外的环境变量")])]),t._v(" "),s("h4",{attrs:{id:"arg-和-env-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-和-env-的区别"}},[t._v("#")]),t._v(" ARG 和 ENV 的区别")]),t._v(" "),s("ul",[s("li",[t._v("ARG 定义的变量只会存在于镜像构建过程，启动容器后并不保留这些变量")]),t._v(" "),s("li",[t._v("ENV 定义的变量在启动容器后仍然保留")])]),t._v(" "),s("h4",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),s("ul",[s("li",[t._v("当容器从生成的镜像运行时，使用 ENV 设置的环境变量将持续存在")]),t._v(" "),s("li",[t._v("可以使用 docker inspect 查看值，并使用 docker run --env "),s("key",[t._v("="),s("value",[t._v(" 更改它们")])],1)],1)]),t._v(" "),s("h3",{attrs:{id:"label-用户为镜像添加元数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#label-用户为镜像添加元数据"}},[t._v("#")]),t._v(" "),s("strong",[t._v("LABEL：")]),t._v(" 用户为镜像添加元数据")]),t._v(" "),s("p",[t._v("可以为生成的镜像添加元数据标签信息，这些信息可以用来辅助过滤出特定镜像")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('格式：\nLABEL <key>=<value> <key>=<value>...\n\n示例：\nLABEL version="1.0" description="这是一个web服务器"\n')])])]),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# key 加了双引号 "')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.vendor"')]),t._v("="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ACME Incorporated"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# key 没有双引号 "')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" com.example.label-with-value="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" version="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 换行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" description="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This text illustrates \\\nthat label-values can span multiple lines."')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一行添加多个 key=value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" multi.label1="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),t._v(" multi.label2="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v(" other="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value3"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价写法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LABEL")]),t._v(" multi.label1="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      multi.label2="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n      other="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value3"')])]),t._v("\n")])])]),s("p",[t._v("注:使用 LABEL 指定元数据时，一条 LABEL 可以指定一条或多条元数据，指定多条元数据时，不同元数据直接通过空格分割。推荐将所有的元数据通过一条 LABEL 指令指定，以免生成过多的中间镜像")]),t._v(" "),s("h4",{attrs:{id:"通过-docker-inspect-查看添加的元数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-docker-inspect-查看添加的元数据"}},[t._v("#")]),t._v(" 通过 docker inspect 查看添加的元数据")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image inspect "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" myimage\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.vendor"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ACME Incorporated"')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.label-with-value"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"version"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"description"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This text illustrates that label-values can span multiple lines."')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"multi.label1"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"multi.label2"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v(",\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"other"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"expose-通知-docker-容器在运行时监听指定的网络端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose-通知-docker-容器在运行时监听指定的网络端口"}},[t._v("#")]),t._v(" "),s("strong",[t._v("EXPOSE：")]),t._v(" 通知 Docker 容器在运行时监听指定的网络端口")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nEXPOSE <port>[<port>...]\nEXPOSE 端口号\nEXPOSE 端口号/协议\n\n示例：\nEXPOSE 80 443\nEXPOSE 8080\nEXPOSE 11211/tcp 11211/udp\n")])])]),s("h4",{attrs:{id:"expose-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose-原理"}},[t._v("#")]),t._v(" EXPOSE 原理")]),t._v(" "),s("ul",[s("li",[t._v("EXPOSE 并不会让容器的端口访问到主机，要使其可访问，需要在 docker run 运行时通过 -p 来映射这些端口，或通过 -P 参数来自动映射 EXPOSE 导出的所有端口")]),t._v(" "),s("li",[t._v("个人理解：EXPOSE 暴露的端口更像是指明了该容器提供的服务需要用到的端口")]),t._v(" "),s("li",[t._v("EXPOSE 并不会直接将端口自动和宿主机某个端口建立映射关系")]),t._v(" "),s("li",[t._v("如果 docker run，指定了自动映射 -P，那么会将所有暴露的端口随机映射到宿主机的高阶端口（比较大的端口号）")]),t._v(" "),s("li",[t._v("如果 docker run，指定了 --net=host 宿主机网络模式，容器中 EXPOSE 指令暴露的端口会直接使用宿主机对应的端口，不存在映射关系")]),t._v(" "),s("li",[t._v("如果 EXPOSE 暴露的端口确定要和某个宿主机端口建立映射关系，还是要用到 docker run -p 参数")]),t._v(" "),s("li",[t._v("EXPOSE 显式地标明镜像开放端口，一定程度上提供了操作的便利，也提高了 Dockerfile 的可读性和可维护性")])]),t._v(" "),s("h3",{attrs:{id:"worddir-工作目录-类似于-cd-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worddir-工作目录-类似于-cd-命令"}},[t._v("#")]),t._v(" "),s("strong",[t._v("WORDDIR：")]),t._v(" 工作目录，类似于 cd 命令")]),t._v(" "),s("ul",[s("li",[t._v("切换到镜像中的指定路径，设置工作目录")]),t._v(" "),s("li",[t._v("为了避免出错，推荐 WORKDIR 指令中只使用绝对路径，如果镜像中对应的路径不存在，会自动创建此目录")]),t._v(" "),s("li",[t._v("一般用 WORKDIR 来替代 RUN cd "),s("path",[t._v(" && "),s("do",{attrs:{something:""}},[t._v(" 切换目录进行操作的指令")])],1)]),t._v(" "),s("li",[t._v("通过 WORKDIR 设置工作目录后，Dockerfile 中其后的命令 RUN、CMD、ENTRYPOINT、ADD、COPY 等命令都会在该目录下执行。")]),t._v(" "),s("li",[t._v("在使用 docker run 运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录")]),t._v(" "),s("li",[t._v("如果不指定 WORKDIR 指令，默认情况下容器启动时的工作目录是 /（根目录）。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nWORKDIR /path/to/workdir\n\n示例：\nWORKDIR /a (这时工作目录为a)\nWORKDIR b  (这时工作目录为/a/b)\n")])])]),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将宿主机的 test.txt 文件复制到 镜像的 /tmp/test.txt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /tmp")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt .")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# WORKDIR 指令可以在 Dockerfile 中多次使用，如果提供了相对路径，它将相对于前一个 WORKDIR 指令的路径")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /a")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" b")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" c")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pwd")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pwd 的输出将会是 /a/b/c")]),t._v("\n")])])]),s("h3",{attrs:{id:"add-将本地文件添加到容器中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-将本地文件添加到容器中"}},[t._v("#")]),t._v(" "),s("strong",[t._v("ADD：")]),t._v(" 将本地文件添加到容器中")]),t._v(" "),s("p",[t._v("tar 类型文件会自动解压(网络压缩资源不会被解压),可以访问网络资源，类似 wget")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('格式：\nADD <src> ... <dest>\nADD ["<src>",... "<dest>"] 用于支持包含空格的路径\n示例：\nADD hom* /mydir/\t#添加所有已"hom"开头的文件\nADD hom?.txt /mydir/      # ? 替代一个单字符,例如："home.txt"\nADD test relativeDir/     # 添加 "test" 到 `WORKDIR`/relativeDir/\nADD test /absoluteDir/    # 添加 "test" 到 /absoluteDir/\n')])])]),s("h3",{attrs:{id:"copy-复制内容到镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制内容到镜像"}},[t._v("#")]),t._v(" "),s("strong",[t._v("COPY：")]),t._v(" 复制内容到镜像")]),t._v(" "),s("p",[t._v("功能类似 ADD，但是不会自动解压文件，也不能访问网络资源")]),t._v(" "),s("ul",[s("li",[t._v("格式： "),s("code",[t._v("COPY [--chown=<user>:<group>] <src>... <dest>")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("--chown=<user>:<group>")]),t._v(" : 可选参数，用于设置复制后文件的所有者（用户和组）。例如，--chown=user:group。")])])]),t._v(" "),s("li",[t._v("复制本地主机的 "),s("code",[t._v("<src>")]),t._v("下内容到镜像中的 "),s("code",[t._v("<dest>")]),t._v("，目标路径不存在时，会自动创建。\n"),s("ul",[s("li",[s("code",[t._v("<src>")]),t._v("：是相对于构建上下文的路径，不能使用相对于 Dockerfile 的相对路径（因为 Dockerfile 可能不在上下文中）")]),t._v(" "),s("li",[s("code",[t._v("<dest>")]),t._v("：可以是镜像内绝对路径，或者相对于工作目录（WORKDIR）的相对路径")])])]),t._v(" "),s("li",[t._v("路径：支持正则表达式， "),s("code",[t._v("COPY test* /tmp")])])]),t._v(" "),s("h4",{attrs:{id:"copy-作用详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-作用详解"}},[t._v("#")]),t._v(" COPY 作用详解")]),t._v(" "),s("ul",[s("li",[t._v("COPY 指令从 "),s("code",[t._v("<src>")]),t._v(" 复制文件、目录或远程文件 URL，并将它们添加到路径 "),s("code",[t._v("<dest>")])]),t._v(" "),s("li",[t._v("可以指定多个 "),s("code",[t._v("<src>")]),t._v(" 资源，但如果它们是文件或目录，则它们的路径被解析为相对于构建上下文的路径")]),t._v(" "),s("li",[t._v("每个 "),s("code",[t._v("<src>")]),t._v(" 可能包含通配符，匹配将使用 Go 的 filepath.Match 规则完成")])]),t._v(" "),s("h4",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# * 通配符，把所有 hom 开头的文件复制到镜像文件系统的 /mydir/ 目录下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom* /mydir/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ? 匹配 0 或 1 个字符，比如会把 home.txt 文件复制到 /mydir/ 目录下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom?.txt /mydir/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用相对路径的栗子")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt relativeDir/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt <WORKDIR>/relativeDir/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用绝对路径，将 test.txt 添加到 /absoluteDir/ 目录下")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt /absoluteDir/")]),t._v("\n")])])]),s("h4",{attrs:{id:"from-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from-示例"}},[t._v("#")]),t._v(" --from="),s("name",[t._v(" 示例")])],1),t._v(" "),s("p",[t._v("将从 from 指定的构建阶段中寻找源文件 "),s("code",[t._v("<src>")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一构建阶段:将仅用于生成 requirements.txt 文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tiangolo/uvicorn-gunicorn:python3.9 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" requirements-stage")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前工作目录设置为 /tmp")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /tmp")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 requirements.txt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" touch requirements.txt")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二构建阶段，在这往后的任何内容都将保留在最终容器映像中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" python:3.9")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前工作目录设置为 /code")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从第一个阶段复制 requirements.txt;这个文件只存在于前一个 Docker 阶段，这就是使用 --from-requirements-stage 复制它的原因")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token options"}},[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("--from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("requirements-stage")])]),t._v(" /tmp/requirements.txt /code/requirements.txt")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pip install --no-cache-dir --upgrade -r /code/requirements.txt")]),t._v("\n")])])]),s("h4",{attrs:{id:"copy-src-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-src-详解"}},[t._v("#")]),t._v(" COPY "),s("code",[t._v("<src>")]),t._v(" 详解")]),t._v(" "),s("h4",{attrs:{id:"src-路径必须在构建的上下文中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-路径必须在构建的上下文中"}},[t._v("#")]),t._v(" "),s("code",[t._v("<src>")]),t._v(" 路径必须在构建的上下文中")]),t._v(" "),s("ul",[s("li",[t._v("COPY 指令只能访问构建上下文中的文件和目录。确保构建上下文包含所需的所有文件。")]),t._v(" "),s("li",[t._v("使用 .dockerignore 文件排除不需要的文件，可以减少构建上下文的大小和构建时间。")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test.txt 是相对路径，相对于构建上下文")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt /mkdir/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以下错误写法，文件均不在上下文目录中，并不会被找到")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个找的就是构建上下文的上级目录的 test.txt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ../test.txt /mkdir/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个找的是本机根目录下的 test.txt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" /test.txt /mkdir/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不能添加  ../something 、 /something ，因为 docker 构建的第一步是将上下文目录（和子目录）发送到 docker 守护进程")]),t._v("\n")])])]),s("h5",{attrs:{id:"src-是目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-是目录"}},[t._v("#")]),t._v(" "),s("code",[t._v("<src>")]),t._v(" 是目录")]),t._v(" "),s("ul",[s("li",[t._v("则复制目录的全部内容，包括文件系统元数据")]),t._v(" "),s("li",[t._v("不会复制目录本身，只会复制其内容，并保持目录结构。")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" dir /mydir/")]),t._v("\n")])])]),s("h5",{attrs:{id:"src-是任何其他类型的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#src-是任何其他类型的文件"}},[t._v("#")]),t._v(" "),s("code",[t._v("<src>")]),t._v(" 是任何其他类型的文件")]),t._v(" "),s("ul",[s("li",[t._v("则将其与其元数据一起单独复制")]),t._v(" "),s("li",[s("code",[t._v("<dest>")]),t._v(" 以斜杠 / 结尾，它将被视为一个目录，并且 "),s("code",[t._v("<src>")]),t._v(" 的内容将写入 "),s("code",[t._v("<dest>")]),t._v("/base("),s("code",[t._v("<src>")]),t._v(")")])]),t._v(" "),s("h5",{attrs:{id:"指定了多个-src-资源-或者由于使用了通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定了多个-src-资源-或者由于使用了通配符"}},[t._v("#")]),t._v(" 指定了多个 "),s("code",[t._v("<src>")]),t._v(" 资源，或者由于使用了通配符")]),t._v(" "),s("p",[t._v("则 "),s("code",[t._v("<dest>")]),t._v(" 必须是一个目录，并且必须以斜杠 / 结尾")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test1.txt test2.txt /mydir/")]),t._v("\n")])])]),s("h4",{attrs:{id:"copy-dest-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-dest-详解"}},[t._v("#")]),t._v(" COPY "),s("code",[t._v("<dest>")]),t._v(" 详解")]),t._v(" "),s("h5",{attrs:{id:"dest-不以斜杠结尾"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dest-不以斜杠结尾"}},[t._v("#")]),t._v(" "),s("code",[t._v("<dest>")]),t._v(" 不以斜杠结尾")]),t._v(" "),s("p",[t._v("它将被视为常规文件，并且 "),s("code",[t._v("<src>")]),t._v(" 的内容将写入 "),s("code",[t._v("<dest>")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt /mytext")]),t._v("\n")])])]),s("h5",{attrs:{id:"如果-dest-是一个已存在的目录-copy-指令会将-src-文件或目录复制到-dest-目录中。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果-dest-是一个已存在的目录-copy-指令会将-src-文件或目录复制到-dest-目录中。"}},[t._v("#")]),t._v(" 如果 "),s("code",[t._v("<dest>")]),t._v(" 是一个已存在的目录，COPY 指令会将 "),s("code",[t._v("<src>")]),t._v(" 文件或目录复制到 "),s("code",[t._v("<dest>")]),t._v(" 目录中。")]),t._v(" "),s("h5",{attrs:{id:"dest-不存在"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dest-不存在"}},[t._v("#")]),t._v(" "),s("code",[t._v("<dest>")]),t._v(" 不存在")]),t._v(" "),s("p",[t._v("路径中所有缺失的目录都会自动创建")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" test.txt /dir/test/my/")]),t._v("\n")])])]),s("h4",{attrs:{id:"add-和-copy-的区别和使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-和-copy-的区别和使用场景"}},[t._v("#")]),t._v(" ADD 和 COPY 的区别和使用场景")]),t._v(" "),s("ul",[s("li",[t._v("ADD 支持添加远程 url 和自动提取压缩格式的文件，COPY 只允许从本机中复制文件\n"),s("ul",[s("li",[t._v("ADD 从远程 url 获取文件和复制的效果并不理想，因为该文件会增加 Docker Image 最终的大小，相反，应该使用 curl huo wget 来获取远程文件，然后在不需要它时进行删除")])])]),t._v(" "),s("li",[t._v("COPY 支持从其他构建阶段中复制源文件（--from）")]),t._v(" "),s("li",[t._v("根据官方 Dockerfile 最佳实践，除非真的需要从远程 url 添加文件或自动提取压缩文件才用 ADD，其他情况一律使用 COPY")])]),t._v(" "),s("h3",{attrs:{id:"volume-用户指定持久化目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume-用户指定持久化目录"}},[t._v("#")]),t._v(" "),s("strong",[t._v("VOLUME：")]),t._v(" 用户指定持久化目录")]),t._v(" "),s("p",[t._v("用于定义匿名的数据卷（volume）。数据卷是 Docker 中的持久存储解决方案，允许你将数据从容器中分离出来并存储在宿主系统中或 Docker 管理的存储中。这样可以确保数据的持久性，即使容器被删除或重新创建，数据仍然存在。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('格式：\nVOLUME ["/path/to/dir"]\n\n示例:\n# 必须时双引号\nVOLUME ["/data"]\nVALUME ["/var/www", "/var/log/apache2"]\n')])])]),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用官方的 nginx 镜像作为基础镜像")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx:latest")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义一个数据卷")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/var/log/nginx"')]),t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本地的 nginx 配置文件复制到容器中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" nginx.conf /etc/nginx/nginx.conf")]),t._v("\n")])])]),s("p",[t._v("在这个例子中，"),s("code",[t._v('VOLUME ["/var/log/nginx"]')]),t._v(" 指令告诉 Docker 将 "),s("code",[t._v("/var/log/nginx")]),t._v(" 目录映射到宿主系统的某个存储位置。这意味着：")]),t._v(" "),s("ul",[s("li",[t._v("当 Nginx 写入日志到 /var/log/nginx 时，日志实际上存储在宿主系统上。")]),t._v(" "),s("li",[t._v("即使删除或重新创建容器，日志数据仍然保持不变。")])]),t._v(" "),s("h4",{attrs:{id:"一个卷可以存在于一个或多个容器的指定目录-改目录可以绕过联合文件系统-并具有以下功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个卷可以存在于一个或多个容器的指定目录-改目录可以绕过联合文件系统-并具有以下功能"}},[t._v("#")]),t._v(" 一个卷可以存在于一个或多个容器的指定目录，改目录可以绕过联合文件系统，并具有以下功能:")]),t._v(" "),s("ol",[s("li",[t._v("可以容器间共享和重用")]),t._v(" "),s("li",[t._v("容器并不一定要和其它容器共享卷")]),t._v(" "),s("li",[t._v("修改卷后会立即生效")]),t._v(" "),s("li",[t._v("对卷的修改不会对镜像产生影响")]),t._v(" "),s("li",[t._v("卷会一直存在，直到没有任何容器在使用它")])]),t._v(" "),s("h4",{attrs:{id:"注意-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("默认权限:")]),t._v(" "),s("ul",[s("li",[t._v("VOLUME 指定的卷在容器中默认具有读写权限。")]),t._v(" "),s("li",[t._v("如果需要只读权限，可以在启动容器时使用 docker run 的 --mount 或 -v 选项进行配置。")])])]),t._v(" "),s("li",[s("p",[t._v("匿名卷 vs 命名卷:")]),t._v(" "),s("ul",[s("li",[t._v("使用 VOLUME 创建的是匿名卷，Docker 会自动生成一个随机名称。")]),t._v(" "),s("li",[t._v("如果希望明确控制卷的名称和位置，建议使用 docker run 的 -v 或 --mount 选项手动挂载命名卷。（比如像 docker run -v <主机目录>:<容器目录> 是可以指定主机目录的）")])])]),t._v(" "),s("li",[s("p",[t._v("卷的数据管理:")]),t._v(" "),s("ul",[s("li",[t._v("卷的数据不会随着容器的删除而删除。要清理卷数据，需要手动删除。")]),t._v(" "),s("li",[t._v("可以使用 docker volume ls 列出所有卷，docker volume rm 删除特定卷，docker volume prune 删除所有未使用的卷。")])])]),t._v(" "),s("li",[s("p",[t._v("卷与 COPY / ADD 的交互:")])])]),t._v(" "),s("ul",[s("li",[t._v("如果 COPY 或 ADD 指令的目标路径是一个 VOLUME 定义的路径，文件会被复制到卷中。")]),t._v(" "),s("li",[t._v("但需要注意，"),s("strong",[t._v("创建卷时，如果路径已经存在数据，卷的内容会覆盖路径上的已有数据。")])])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("卷的挂载位置:")])]),t._v(" "),s("ul",[s("li",[t._v("在启动容器时，卷的挂载位置可以指定为宿主系统上的绝对路径或 Docker 管理的默认位置。")]),t._v(" "),s("li",[t._v("例如：docker run -v /host/data:/container/data 会将宿主系统的 /host/data 目录挂载到容器的 /container/data 目录。")])]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("保持数据安全和一致性:")])]),t._v(" "),s("ul",[s("li",[t._v("在处理敏感数据时，确保卷的权限设置正确，防止未经授权的访问。")]),t._v(" "),s("li",[t._v("使用卷时，确保容器中访问和修改卷数据的进程正确处理文件系统的并发和锁定问题，以避免数据一致性问题。")])]),t._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[t._v("性能问题:")])]),t._v(" "),s("ul",[s("li",[t._v("在高 I/O 场景下，卷的性能可能成为瓶颈。可以考虑将数据存储在性能更高的存储介质上，比如 SSD。")])]),t._v(" "),s("h3",{attrs:{id:"run-构建镜像时执行的命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-构建镜像时执行的命令"}},[t._v("#")]),t._v(" "),s("strong",[t._v("RUN：")]),t._v(" 构建镜像时执行的命令")]),t._v(" "),s("p",[t._v("RUN 用于在镜像容器中执行命令，其有以下两种命令执行方式：shell 执行和 exec 执行")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('shell执行\n  命令在 shell 中运行\n  Linux 上默认为 /bin/sh -c\n  Windows 上 cmd /S /C\n格式：RUN <command>\n\nexec执行\n必须双引号，不能是单引号\n格式：RUN ["executable", "param1", "param2"]\n\n示例：\nRUN /bin/bash -c \'source $HOME/.bashrc; echo $HOME\'\nRUN ["/bin/bash", "-c", "echo hello"]\n')])])]),s("p",[t._v("注：RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用，如果不想使用这些缓存镜像，可以再构建时指定--no-cache 参数，如："),s("code",[t._v("docker build --no-cache .")])]),t._v(" "),s("h4",{attrs:{id:"run-指令的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-指令的原理"}},[t._v("#")]),t._v(" RUN 指令的原理")]),t._v(" "),s("ul",[s("li",[t._v("RUN 指令将在当前镜像上加新的一层，并执行任何命令和提交结果，生成的提交镜像将用于 Dockfile 中的后续步骤")]),t._v(" "),s("li",[t._v("分层 RUN 指令和生成提交符合 Docker 核心概念，提交成本低，并且可以通过 docker history 中的任意步骤创建容器，像 git 代码控制一样")])]),t._v(" "),s("h3",{attrs:{id:"cmd-指定容器默认执行的命令-构建容器后调用-也就是在容器启动时才进行调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd-指定容器默认执行的命令-构建容器后调用-也就是在容器启动时才进行调用"}},[t._v("#")]),t._v(" "),s("strong",[t._v("CMD：")]),t._v(" 指定容器默认执行的命令，构建容器后调用，也就是在容器启动时才进行调用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('格式：\nCMD["excutable","param1","param2"](执行可执行文件，优先)\nCMD["param1","param2"]（设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数）\nCMD command param1 param2 (执行shell内部命令)\n\n示例：\nCMD echo "This is a test."\nCMD ["/user/bin/wc", "--help"]\n')])])]),s("h4",{attrs:{id:"注意-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-3"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),s("ul",[s("li",[t._v("一个 Dockerfile 只有一个 CMD 指令，若有多个，只有最后一个 CMD 指令生效")]),t._v(" "),s("li",[t._v("CMD 主要目的：为容器提供默认执行的命令，这个默认值可以包含可执行文件，也可以不包含可执行文件，如果不包含可执行文件，意味着必须指定 ENTRYPOINT 指令（第二种写法）")]),t._v(" "),s("li",[t._v("exec 模式下不能单独使用环境变量，必须要跟命令一起用")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('# 错误写法，不会使用 HOME 环境变量\nCMD [ "echo", "$HOME" ]\n\n# 正确写法，需要将 echo 和使用环境变量放一起\nCMD [ "sh", "-c", "echo $HOME" ]\n')])])]),s("h4",{attrs:{id:"run-和-cmd-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-和-cmd-的区别"}},[t._v("#")]),t._v(" RUN 和 CMD 的区别")]),t._v(" "),s("ul",[s("li",[t._v("RUN 可以在构建阶段运行很多个命令，而且每运行一个命令都会单独提交结果")]),t._v(" "),s("li",[t._v("CMD 在构建阶段不执行任何操作，而是指定镜像默认执行的命令")])]),t._v(" "),s("h3",{attrs:{id:"entrypoint-指定镜像的默认入口命令-该入口命令会在启动容器时作为根命令执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-指定镜像的默认入口命令-该入口命令会在启动容器时作为根命令执行"}},[t._v("#")]),t._v(" "),s("strong",[t._v("ENTRYPOINT：")]),t._v(" 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行")]),t._v(" "),s("ul",[s("li",[t._v("ENTRYPOINT 指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有其他传入值作为该命令的参数")]),t._v(" "),s("li",[t._v("ENTRYPOINT 的值可以通过 docker run --entrypoint 来覆盖掉")]),t._v(" "),s("li",[t._v("Dockerfile 中只允许有一个 ENTRYPOINT 命令，多指定时会覆盖前面的设置，而只执行最后的 ENTRYPOINT 指令")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('格式：\nENTRYPOINT ["executable","param1","param2"](可执行文件，优先)\nENTRYPOINT command param1 param2 (shell 内部命令)\n\n示例:\nFROM ubuntu\nENTRYPOINT["top","-b"]\nCMD[\'-c\']\n')])])]),s("h4",{attrs:{id:"cmd-和-entrypoint-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd-和-entrypoint-区别"}},[t._v("#")]),t._v(" CMD 和 ENTRYPOINT 区别")]),t._v(" "),s("ul",[s("li",[t._v("CMD 指定这个容器启动的时候要运行的命令，不可以追加命令")]),t._v(" "),s("li",[t._v("ENTRYPOINT 指定这个容器启动的时候要运行的命令，可以追加命令")])]),t._v(" "),s("h4",{attrs:{id:"entrypoint-和-cmd-联合使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-和-cmd-联合使用"}},[t._v("#")]),t._v(" ENTRYPOINT 和 CMD 联合使用")]),t._v(" "),s("ul",[s("li",[t._v("当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令")]),t._v(" "),s("li",[t._v("换句话说实际执行时，会变成 "),s("code",[t._v('<ENTRYPOINT> "<CMD>"')])])]),t._v(" "),s("h4",{attrs:{id:"entrypoint-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-应用场景"}},[t._v("#")]),t._v(" ENTRYPOINT 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("启动容器就是启动主进程，但启动主进程前，可能需要一些准备工作，比如 mysql 可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决")]),t._v(" "),s("li",[t._v("还可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务")]),t._v(" "),s("li",[t._v("这些准备工作是和容器 CMD 无关的，无论 CMD 是什么，都需要事先进行一个预处理的工作，这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 "),s("CMD",[t._v("）作为命令，在脚本最后执行")])],1)]),t._v(" "),s("h3",{attrs:{id:"onbuild-用于设置镜像触发器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#onbuild-用于设置镜像触发器"}},[t._v("#")]),t._v(" "),s("strong",[t._v("ONBUILD：")]),t._v(" 用于设置镜像触发器")]),t._v(" "),s("ul",[s("li",[t._v("ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行")]),t._v(" "),s("li",[t._v("只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行")]),t._v(" "),s("li",[t._v("Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("格式：\nONBUILD [INSTRUCTION]\n\n示例：\nONBUILD ADD . /app/src\nONBULD RUN /usr/local/bin/python-build --dir /app/src\n")])])]),s("p",[t._v("小例子：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('# This my first nginx Dockerfile\n# Version 1.0\n\n# Base images 基础镜像\nFROM centos\n\n#MAINTAINER 维护者信息\nMAINTAINER gh\n\n#ENV 设置环境变量\nENV PATH /usr/local/nginx/sbin:$PATH\n\n#ADD  文件放在当前目录下，拷过去会自动解压\nADD nginx-1.8.0.tar.gz /usr/local/\nADD epel-release-latest-7.noarch.rpm /usr/local/\n\n#RUN 执行以下命令\nRUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm\n\nRUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre && yum clean all\n\nRUN useradd -s /sbin/nologin -M www\n\n\n#WORKDIR 相当于cd\nWORKDIR /usr/local/nginx-1.8.0\n\n\nRUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre && make && make install\n\n\nRUN echo "daemon off;" >> /etc/nginx.conf\n\n\n#EXPOSE 映射端口\nEXPOSE 80\n\n\n#CMD 运行以下命令\nCMD ["nginx"]\n\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);