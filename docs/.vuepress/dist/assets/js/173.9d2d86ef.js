(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{619:function(t,e,s){"use strict";s.r(e);var r=s(25),a=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前端代码规范和编码风格详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端代码规范和编码风格详解"}},[t._v("#")]),t._v(" 前端代码规范和编码风格详解")]),t._v(" "),e("p",[t._v("本文以 VS Code 编辑器为例展开，可以搭配 "),e("a",{attrs:{href:"https://github.com/qiqihaobenben/vscode-linter-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("vscode-linter-example"),e("OutboundLink")],1),t._v(" 这个例子对照着实践一下。")]),t._v(" "),e("h2",{attrs:{id:"vs-code-编辑器自身配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-编辑器自身配置"}},[t._v("#")]),t._v(" VS Code 编辑器自身配置")]),t._v(" "),e("p",[t._v("VS Code 的配置有三种形式：全局默认配置、用户配置、工作区配置。")]),t._v(" "),e("ul",[e("li",[t._v("全局默认配置：VS Code 在安装完成后，在安装目录会有一个 "),e("code",[t._v("settings.json")]),t._v(" 配置文件。")]),t._v(" "),e("li",[t._v("用户配置：对应的是软件目录中跟当前用户相关联的特定文件夹中的 "),e("code",[t._v("settings.json")]),t._v(" 配置文件（类似于 macOS 中 $HOME/Library/Application Support/Code/User/settings.json），用户配置在所有打开窗口都生效。通过 "),e("code",[t._v("ctrl/cmd + ,")]),t._v(" 打开的设置就是用户配置 "),e("code",[t._v("settings.json")]),t._v(" 的 UI 视图。")]),t._v(" "),e("li",[t._v("工作区配置：也称项目配置，此时的 "),e("code",[t._v("settings.json")]),t._v(" 存放于项目所在根目录的 "),e("code",[t._v(".vscode")]),t._v(" 文件中，当项目在 VS Code 中打开时，仅针对当前项目打开的窗口生效。")])]),t._v(" "),e("p",[t._v("这三种形式的配置优先级：项目配置 > 用户配置 > 全局默认配置。")]),t._v(" "),e("p",[t._v("如果存在多种配置，那么优先级高的会覆盖优先级低的，这样的好处是可以为不同项目、不同用户做不同配置，而不会相互干扰，并且项目配置特定于项目，方便开发人员之间共享，达到统一开发环境和编码风格的目的。")]),t._v(" "),e("h3",{attrs:{id:"vs-code-的-vscode-文件夹"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-的-vscode-文件夹"}},[t._v("#")]),t._v(" VS Code 的 "),e("code",[t._v(".vscode")]),t._v(" 文件夹")]),t._v(" "),e("p",[t._v("项目根目录中的"),e("code",[t._v(".vscode")]),t._v(" 文件夹，除了存放项目配置，还有其他的配置。")]),t._v(" "),e("p",[e("code",[t._v(".vscode")]),t._v(" 文件夹下包含的配置：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("settings.json")])]),t._v(" "),e("li",[e("code",[t._v("extensions.json")])]),t._v(" "),e("li",[e("code",[t._v("tasks.json")])]),t._v(" "),e("li",[e("code",[t._v("launch.json")])])]),t._v(" "),e("h3",{attrs:{id:"settings-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-json"}},[t._v("#")]),t._v(" "),e("code",[t._v("settings.json")])]),t._v(" "),e("p",[t._v("可以在这个项目配置文件中利用编辑器自身默认格式化程序来进行编码风格统一，这也是最基本的格式化。")]),t._v(" "),e("h4",{attrs:{id:"常用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用配置"}},[t._v("#")]),t._v(" 常用配置")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存时自动格式化代码")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据打开文件的内容自动检测缩进，会覆盖默认缩进设置，相关设置： #editor.tabSize#和#editor.intertSpaces#")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如虽然下面设置的 tabSize 为 4，但是当前文件打开时是文件内容的 tabSize 为 2，所以依然会沿用 2，如果设置为 false，后续的 tabSize 则会使用 4")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.detectIndentation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.insertSpaces"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否使用空格")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.tabSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空格或者制表符的大小")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.fontSize"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编辑器字体大小")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.rulers"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 垂直标尺，会在指定列号处显示竖线")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrap"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wordWrapColumn"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制换行方式")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.wordWrapColumn"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制换行的宽度")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"屏蔽文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#屏蔽文件"}},[t._v("#")]),t._v(" 屏蔽文件")]),t._v(" "),e("p",[t._v("项目开发中，有些生成的中间文件或者有一些不希望项目普通开发者改动的配置文件等，就可以在 "),e("code",[t._v("settings.json")]),t._v(" 中配置，屏蔽这些文件。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 搜索文件时不希望查找的文件")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"search.exclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/node_modules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/bower_components"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/*.code-search"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不想展示的文件")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files.exclude"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/.git"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/build"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/deploy.sh"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"其他配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他配置"}},[t._v("#")]),t._v(" 其他配置")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 额外补充一下，VS Code 默认支持 TS，并且可以切换使用项目安装的 TypeScript 版本提供的语法解析和类型检测服务")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typescript.tsdk"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules/typescript/lib"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"extensions-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extensions-json"}},[t._v("#")]),t._v(" "),e("code",[t._v("extensions.json")])]),t._v(" "),e("p",[t._v("后续会用到的 eslint 和 prettier 插件可以直接添加在 "),e("code",[t._v("extensions.json")]),t._v("，方便其他开发人员安装。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每一项都是一个插件 ID")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"recommendations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dbaeumer.vscode-eslint"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslint 插件ID，下面会讲到此插件")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"esbenp.prettier-vscode"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prettier 插件ID，下面会讲到此插件")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EditorConfig.EditorConfig"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// EditorConfig 插件ID，下面会讲到此插件")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"octref.vetur"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"formulahendry.auto-close-tag"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"formulahendry.auto-rename-tag"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("配置完成后，项目开发者在第一次打开项目的时候会收到 VS Code 的推荐提醒，可以进行一键安装。如果错过了这次提醒，在侧边栏的插件选项中，也可以筛选出推荐插件进行一键安装。")]),t._v(" "),e("h3",{attrs:{id:"关于-任务相关-tasks-json-和-调试相关的-launch-json-后续有机会再聊。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于-任务相关-tasks-json-和-调试相关的-launch-json-后续有机会再聊。"}},[t._v("#")]),t._v(" 关于 任务相关 "),e("code",[t._v("tasks.json")]),t._v(" 和 调试相关的 "),e("code",[t._v("launch.json")]),t._v("，后续有机会再聊。")]),t._v(" "),e("h2",{attrs:{id:"editorconfig"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#editorconfig"}},[t._v("#")]),t._v(" EditorConfig")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://editorconfig.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("EditorConfig"),e("OutboundLink")],1),t._v(" 是用来帮助开发者定义和维护编码风格的（例如缩进样式，行尾字符等），EditorConfig 包含一个用于定义代码格式的自定义文件 "),e("code",[t._v(".editorconfig")]),t._v(" 和一批编辑器插件，这些插件是让编辑器能够使用自定义配置文件并以此来格式化代码。")]),t._v(" "),e("p",[t._v("使用了 EditorConfig 后，编辑器的行为会与 "),e("code",[t._v(".editorconfig")]),t._v(" 文件中定义的一致，并且其优先级比编辑器自身的设置要高（比上一小节讲到的 VS Code 自身配置优先级高）。有些编辑器默认支持 EditorConfig，如 WebStorm；而有些编辑器则需要安装 EditorConfig 插件，如 Sublime、VS Code 等（所以说可以跨编辑器生效）。")]),t._v(" "),e("p",[t._v("VS Code 安装非常简单，直接在插件市场搜索 "),e("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("EditorConfig for VS Code"),e("OutboundLink")],1),t._v(" 安装然后重启编辑器。")]),t._v(" "),e("p",[t._v("当打开一个文件时，EditorConfig 插件会在打开文件的目录和其每一级父目录查找 "),e("code",[t._v(".editorconfig")]),t._v(" 文件，直到有一个配置文件出现 "),e("code",[t._v("root=true")]),t._v("。")]),t._v(" "),e("p",[t._v("EditorConfig 的配置文件是从上往下读取的，并且最近的 "),e("code",[t._v(".editorconfig")]),t._v(" 会被最先读取，匹配 "),e("code",[t._v(".editorconfig")]),t._v(" 中的配置项会按照读取顺序被应用，如果 "),e("code",[t._v(".editorconfig")]),t._v(" 文件没有进行某些配置，则使用编辑器默认的设置。")]),t._v(" "),e("h3",{attrs:{id:"配置-editorconfig"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-editorconfig"}},[t._v("#")]),t._v(" 配置 "),e("code",[t._v(".editorconfig")])]),t._v(" "),e("p",[t._v("文件名匹配：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("*                匹配除/之外的任意字符串\n**               匹配任意字符串\n?                匹配任意单个字符\n[name]           匹配name字符\n[!name]          不匹配name字符\n{s1,s2,s3}       匹配给定的字符串中的任意一个(用逗号分隔)\n{num1..num2}   　匹配num1到num2之间的任意一个整数, 这里的num1和num2可以为正整数也可以为负整数\n")])])]),e("p",[t._v("常用属性：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("root :        　　　表示是最顶层的配置文件，发现设为true时，才会停止查找上级的.editorconfig文件\nindent_style :    设置缩进风格(tab是硬缩进，space为软缩进)\nindent_size :     用一个整数定义的列数来设置缩进的宽度，如果indent_style为tab，则此属性默认为tab_width\ntab_width :       用一个整数来设置tab缩进的列数。如果indent_style为space，默认是indent_size\nend_of_line :     设置换行符，值为lf、cr和crlf\ncharset :         设置编码，值为latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom\ntrim_trailing_whitespace :  设为true表示会去除行尾空格\ninsert_final_newline :      设为true表示使文件以一个空白行结尾\nmax_line_length ：          最大行宽（vscode 不支持）\ncurly_bracket_next_line ：     设为false表示大括号不另起一行（vscode 不支持）\nspaces_around_operators ：     设为true运算符两边都有空格（vscode 不支持）\nquote_type :                设置字符串的引号类型，single是单引号,double是双引号（vscode 不支持）\n")])])]),e("h3",{attrs:{id:"使用的基础库和内置对象实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用的基础库和内置对象实例"}},[t._v("#")]),t._v(" 使用的基础库和内置对象实例")]),t._v(" "),e("p",[t._v("安装完 EditorConfig 插件，并且创建并完善了 "),e("code",[t._v(".editorconfig")]),t._v(" 自定义规则，此时，"),e("code",[t._v(".editorconfig")]),t._v(" 中的规则会覆盖 VS Code user/workspace settings 中对应的配置。")]),t._v(" "),e("p",[t._v("例如一个示例 "),e("code",[t._v(".editorconfig")]),t._v(" ：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("root = true\n\n[*]\ncharset = utf-8\n\n[*.{js,jsx,ts,tsx,vue}]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n\n")])])]),e("p",[t._v("EditorConfig 仅能够简单的配置一些规则，并不能完全满足需求，只是起到一个"),e("strong",[t._v("跨编辑器和 IDE 统一编码风格的兜底配置")]),t._v("，如果要达到很好的代码规范和编码风格的统一，还需要配置其他代码检查和格式化工具使用，比如：ESLint 和 Prettier。")]),t._v(" "),e("h2",{attrs:{id:"eslint-v9-以下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint-v9-以下"}},[t._v("#")]),t._v(" ESLint(V9 以下)")]),t._v(" "),e("p",[t._v("ESLint 是一款插件化的 JavaScript 代码静态检查工具，其核心是通过 Espree（默认解析器）对 JavaScript 代码解析得到的 AST（抽象语法树）进行模式匹配（每条规则都会对匹配的过程进行监听，每当匹配到一个类型，相应的规则就会进行检查），分析代码达到检查代码质量和编码风格的能力，同时有些 lint 规则可以避免 bug 的产生，在提高代码可读性、可维护性的前提下，减少问题数量。")]),t._v(" "),e("blockquote",[e("p",[t._v("代码检查是一种静态的分析，常用于寻找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。")])]),t._v(" "),e("p",[t._v("ESLint 能够获得成功的几个原因：")]),t._v(" "),e("ul",[e("li",[t._v("可以用其他的 parser 来代替默认的 parser，只要它的输出与 Esprima(或 Espree)兼容；")]),t._v(" "),e("li",[t._v("可扩展性是关键")]),t._v(" "),e("li",[t._v("规则设置为完全可配置，意味着可以关闭每一个规则而只运行基础语法验证，或把 ESLint 默认绑定的规则和你的自定义规则混合")])]),t._v(" "),e("h3",{attrs:{id:"eslint-命令行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint-命令行"}},[t._v("#")]),t._v(" ESLint 命令行")]),t._v(" "),e("p",[t._v("初始化 ESLint")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install eslint -D\n\nnpx eslint --init\n")])])]),e("p",[t._v("在 eslint 初始化的时候会询问如何配置，具体问题及选项可以参考：https://github.com/eslint/eslint/blob/v6.0.1/lib/init/config-initializer.js#L422 。")]),t._v(" "),e("p",[t._v("eslint 初始化后会在文件夹的根目录生成一个 "),e("code",[t._v(".eslintrc.js")]),t._v(" 文件。")]),t._v(" "),e("p",[t._v("运行 "),e("code",[t._v("npx eslint .")]),t._v(" 可以校验文件夹下的所有文件。")]),t._v(" "),e("p",[t._v("运行 "),e("code",[t._v("npx eslint . --fix")]),t._v(" 可以修复文件中的问题")]),t._v(" "),e("h3",{attrs:{id:"vs-code-使用-eslint-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-使用-eslint-插件"}},[t._v("#")]),t._v(" VS Code 使用 ESLint 插件")]),t._v(" "),e("p",[t._v("使用 ESLint 命令行的方式是主动进行的编译动作，这个动作注定不是高频的，但是谁也不想写了几百行代码后，运行 ESLint 校验发现有 n 个警告和报错，所以在编码的过程中实时看到校验结果是很有必要的。")]),t._v(" "),e("p",[t._v("在 VS Code 中可以安装 ESLint 插件，就可以让编辑器实时的提示警告和报错，不必再等到编译时提示了。")]),t._v(" "),e("p",[t._v("当然也可以为 ESLint 启用“保存时自动修复”：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.codeActionsOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"source.fixAll.eslint"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("VS Code 插件运行需要本地项目的 ESLint 相关插件和配置都存在（依赖、配置文件），但不一定要被编译。")])]),t._v(" "),e("p",[t._v("既然在 VS Code 中用上了 ESLint 插件能实时提示警告和报错了，那么是不是就用不到命令行的 ESLint 了?")]),t._v(" "),e("p",[t._v("答案是还需要命令行的 ESLint，因为不能保证项目的所有开发者都用了 VS Code，或者也有可能把 ESLint 插件手动关掉了，不管怎样，提交到仓库中的代码必须符合统一的代码规范和编码风格，所以在提交到仓库之前必须要进行一次 ESLint 校验。")]),t._v(" "),e("h3",{attrs:{id:"eslint-配置项解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint-配置项解析"}},[t._v("#")]),t._v(" ESLint 配置项解析")]),t._v(" "),e("p",[t._v("ESLint 的配置文件命名可以是 "),e("code",[t._v("eslintrc.js")]),t._v("、"),e("code",[t._v("eslintrc.yaml")]),t._v("、"),e("code",[t._v("eslintrc.json")]),t._v("，甚至配置在 "),e("code",[t._v("package.json")]),t._v(" 中的 "),e("code",[t._v("eslintConfig")]),t._v(" 属性。不过 "),e("code",[t._v(".eslintrc")]),t._v(" 这个配置文件命名据说要被废弃。")]),t._v(" "),e("p",[t._v("从"),e("a",{attrs:{href:"https://github.com/eslint/eslint/blob/v6.0.1/lib/cli-engine/config-array-factory.js#L52",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码"),e("OutboundLink")],1),t._v("中可以看出配置文件的优先级如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const configFilenames = [\n     .eslintrc.js ,\n     .eslintrc.cjs ,\n     .eslintrc.yaml ,\n     .eslintrc.yml ,\n     .eslintrc.json ,\n     .eslintrc ,\n     package.json\n];\n")])])]),e("p",[t._v("以下是较为全面的配置项解析：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6909788084666105864#heading-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 配置项解析"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6923141007663955982",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 之解析包名"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://gist.github.com/qiqihaobenben/3309a1bad929541fa201397625ea6890",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 配置文件.eslintrc 参数说明"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"解析器-parse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析器-parse"}},[t._v("#")]),t._v(" 解析器（parse）")]),t._v(" "),e("p",[t._v("简单说一下三种解析器：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("espree")]),t._v(" ： ESLint 默认解析器")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/babel/babel-eslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/eslint-parser"),e("OutboundLink")],1),t._v(" ： 可以检查所有有效的 babel 代码，即让 ES6+ 的代码和那些实验性质的语法也能用 ESLint")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("@typescript-eslint/parser"),e("OutboundLink")],1),t._v(" ：该解析器将 "),e("code",[t._v("TypeScript")]),t._v(" 转换成与 "),e("code",[t._v("espree")]),t._v(" 兼容的格式，从而允许 ESLint 验证 "),e("code",[t._v("TypeScript")]),t._v(" 源代码。")])]),t._v(" "),e("blockquote",[e("p",[t._v("额外说一下，ESLint 默认解析器到底是 Esprima 还是 Espree？ ESLint 最早的版本默认解析器是使用的开源的 Esprima，不过当 ESLint 打算支持 ES6 和 JSX 时发现 Esprima 维护频率不高并且还没有打算发布对 ES6 的支持，经过多方调研，最后选择实现自己的解析器就是 Espree，现在的 ESLint 默认解析器是 Espree。")])]),t._v(" "),e("h4",{attrs:{id:"扩展-extends"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展-extends"}},[t._v("#")]),t._v(" 扩展（extends）")]),t._v(" "),e("p",[e("strong",[t._v("扩展可以共享配置，并且可以修改规则，然后覆盖掉某些不需要的配置。")])]),t._v(" "),e("p",[t._v("简单说一下几种常见的扩展：")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-config-airbnb"),e("OutboundLink")],1),t._v(" ：提供了所有的 Airbnb 的 ESLint 配置。该配置包含了 React 相关的 ESLint 规则，所以需要安装 "),e("code",[t._v("eslint-plugin-import")]),t._v(", "),e("code",[t._v("eslint-plugin-react")]),t._v(", "),e("code",[t._v("eslint-plugin-react-hooks")]),t._v(", "),e("code",[t._v("eslint-plugin-jsx-a11y")]),t._v(" 这四个插件，并且它不支持 React Hooks rules，如果要支持还需要启用 "),e("code",[t._v("eslint-config-airbnb/hooks")]),t._v(" 这个扩展。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-config-airbnb-base"),e("OutboundLink")],1),t._v(" ： 不包含 React 的规则，一般用于服务端检查")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/prettier/eslint-config-prettier",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-config-prettier"),e("OutboundLink")],1),t._v(" ：禁用掉所有那些非必须或者和 prettier 冲突的 ESLint 规则，这样可以避免其他共享配置影响到 Prettier 的格式化。注意该扩展只是将涉及到的规则关掉了（off），所以它只有在和别的配置一起使用的时候才有意义。例如 "),e("code",[t._v('extends: ["eslint:recommended", "prettier"]')]),t._v("，prettier 写在最后，后面的规则会覆盖前面的。")])])]),t._v(" "),e("h4",{attrs:{id:"插件-plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件-plugins"}},[t._v("#")]),t._v(" 插件（plugins）")]),t._v(" "),e("p",[t._v("简单说一下几种常见的插件：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/babel/babel/tree/main/eslint/babel-eslint-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/eslint-plugin"),e("OutboundLink")],1),t._v(" ： "),e("code",[t._v("@babel/eslint-parser")]),t._v(" 解析器搭档的插件，为了支持 ES6+ 的代码，"),e("code",[t._v("@babel/eslint-plugin")]),t._v(" 重新实现了有问题的规则，避免错误误报。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/import-js/eslint-plugin-import",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-import"),e("OutboundLink")],1),t._v(" ：这个插件的目的是支持检查 ES6+ 的 "),e("code",[t._v("import/export")]),t._v(" 语法，也能避免文件路径和导入名称的拼写错误")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-jsx-a11y"),e("OutboundLink")],1),t._v(" ： 检查 JSX 元素的可访问性")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/jsx-eslint/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-react"),e("OutboundLink")],1),t._v(" ：\nReact 专用的校验规则插件")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("@typescript-eslint/eslint-plugin"),e("OutboundLink")],1),t._v(" ： 提供 TypeScript 代码的检查规则")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/prettier/eslint-plugin-prettier",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-prettier"),e("OutboundLink")],1),t._v(" ：让 ESLint 和 Prettier 有良好的配合，这个插件的主要作用是将 "),e("code",[t._v("prettier")]),t._v(" 作为 ESLint 的规则来使用，相当于代码不符合 Prettier 的标准时，会报一个 ESLint 错误，同时也可以通过 "),e("code",[t._v("eslint --fix")]),t._v(" 来进行格式化。相当于把 Prettier 整合进了 ESLint 中。")])]),t._v(" "),e("h4",{attrs:{id:"规则-rules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规则-rules"}},[t._v("#")]),t._v(" 规则（rules）")]),t._v(" "),e("p",[t._v("重点说一下 ESLint 的 rules。官方推荐的规则可以使用 "),e("code",[t._v('"extends": ["eslint:recommended"]')]),t._v(" 来开启推荐规则，"),e("a",{attrs:{href:"https://eslint.bootcss.com/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击查看详细文档"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("ESLint 的规则提示等级：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("off")]),t._v(" 或 0：关闭规则")]),t._v(" "),e("li",[e("code",[t._v("warn")]),t._v(" 或 1：开启规则，warn 级别的错误只是警告，不会导致程序退出")]),t._v(" "),e("li",[e("code",[t._v("error")]),t._v(" 或 2：开启规则，error 级别的错误当被触发时，程序会推出")])]),t._v(" "),e("p",[t._v("ESlint 的规则本身又可以分为两类：")]),t._v(" "),e("ol",[e("li",[t._v("规则没有属性，只需控制是开启还是关闭，例如："),e("code",[t._v('"eqeqeq": "off"')]),t._v(" 关闭全等校验")]),t._v(" "),e("li",[t._v("规则有自己的属性，例如："),e("code",[t._v('"quotes": ["error", "double"]')])])]),t._v(" "),e("p",[e("strong",[t._v("还有一点很重要，我们可以通过 "),e("code",[t._v("rules")]),t._v(" 这个配置项配置任何想要的规则，它会覆盖 "),e("code",[t._v("extends")]),t._v(" 和 "),e("code",[t._v("plugins")]),t._v(" 中引入的配置项，也就是说 "),e("code",[t._v(".eslintrc.*")]),t._v(" 中 "),e("code",[t._v("rules")]),t._v(" 配置的规则优先级很高。")])]),t._v(" "),e("p",[t._v("有时候我们需要使用自定义规则，自定义 ESLint 规则的实现主要在于理解一个 rule 的结构：")]),t._v(" "),e("p",[t._v("例如：no-with")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包含规则的元数据,包括规则的类型，文档，是否推荐规则，是否可修复等信息")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("meta")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 指示规则的类型，值为 "problem"、"suggestion" 或 "layout"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'suggestion'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("docs")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对 ESLint 核心规则来说是必需的")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("description")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'disallow `with` statements'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提供规则的简短描述在规则首页展示")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// category (string) 指定规则在规则首页处于的分类")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("recommended")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 配置文件中的 "extends": "eslint:recommended"属性是否启用该规则')]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("url")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://eslint.org/docs/rules/no-with'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定可以访问完整文档的 url")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fixable 如果没有 fixable 属性，即使规则实现了 fix 功能，ESLint 也不会进行修复。如果规则不是可修复的，就省略 fixable 属性。")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("schema")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定该选项 这样的 ESLint 可以避免无效的规则配置")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deprecated (boolean) 表明规则是已被弃用。如果规则尚未被弃用，你可以省略 deprecated 属性。")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("messages")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("unexpectedWith")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Unexpected use of 'with' statement.\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// create (function) 返回一个对象，其中包含了 ESLint 在遍历 js 代码的抽象语法树 AST (ESTree 定义的 AST) 时，用来访问节点的方法。入参为该节点。")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("context")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一个 key 是个节点类型或 selector，在 向下 遍历树时，ESLint 调用 visitor 函数")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一个 key 是个节点类型或 selector，并带有 :exit，在 向上 遍历树时，ESLint 调用 visitor 函数")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一个 key 是个事件名字，ESLint 为代码路径分析调用 handler 函数")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// selector 类型可以到 estree 查找")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入参为节点node")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithStatement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("report")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("messageId")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'unexpectedWith'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("开发一个自定义规则，可以查看官方文档：https://eslint.org/docs/latest/developer-guide/working-with-rules。")]),t._v(" "),e("p",[t._v("有几个开发插件或介绍 ESLint 原理的文章可以看一下：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.zoo.team/article/eslint-rules",target:"_blank",rel:"noopener noreferrer"}},[t._v("自定义 ESLint 规则，让代码持续美丽"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/0MGRKzCoPM_jn--ttb7b9Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅析 ESLint 原理"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"几个不常见的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几个不常见的配置"}},[t._v("#")]),t._v(" 几个不常见的配置")]),t._v(" "),e("ul",[e("li",[t._v("overrides ：我们在 "),e("code",[t._v(".eslintrc.*")]),t._v(" 的 rules 中配置的规则一般都是全局生效，通过 overrides 可以针对一些文件覆盖一些规则。")]),t._v(" "),e("li",[t._v("settings ： 通过 settings 可以像每条 rule 传入一些自定义的配置内容。")])]),t._v(" "),e("h4",{attrs:{id:"eslint-检测配置文件步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint-检测配置文件步骤"}},[t._v("#")]),t._v(" ESLint 检测配置文件步骤")]),t._v(" "),e("ol",[e("li",[t._v("先查看有没有内联配置，如果是命令行在查看有没有配置参数")]),t._v(" "),e("li",[t._v("在要检测的文件同一目录里寻找 "),e("code",[t._v(".eslintrc.*")]),t._v(" 和 "),e("code",[t._v("package.json")])]),t._v(" "),e("li",[t._v("紧接着在父级目录寻找，一直找到文件系统的根目录")]),t._v(" "),e("li",[t._v("如果在前两步发现有 "),e("code",[t._v("root: true")]),t._v(" 的配置，停止在父级目录中寻找 "),e("code",[t._v(".eslintrc.*")])]),t._v(" "),e("li",[t._v("如果以上步骤都没找到，则回退到用户主目录 "),e("code",[t._v("~/.eslintrc")]),t._v(" 中定义的默认配置")])]),t._v(" "),e("h3",{attrs:{id:"eslintignore-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslintignore-文件"}},[t._v("#")]),t._v(" "),e("code",[t._v(".eslintignore")]),t._v(" 文件")]),t._v(" "),e("p",[t._v("可以通过在项目根目录创建一个 "),e("code",[t._v(".eslintignore")]),t._v(" 文件告诉 ESLint 去忽略特定的文件和目录。"),e("code",[t._v(".eslintignore")]),t._v(" 文件是一个纯文本文件，其中的每一行都是一个 glob 模式表明哪些路径应该忽略检测，类似于"),e("code",[t._v(".gitignore")]),t._v("。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 这是一个注释\nnode_modules/\ndist/*.js\n")])])]),e("blockquote",[e("p",[t._v("ESLint 忽略文件还可以再命令行中通过参数重新设置： "),e("code",[t._v("eslint . --ignore-path .gitignore")]),t._v("，即直接使用 .gitignore 当做 .eslintignore")])]),t._v(" "),e("h2",{attrs:{id:"prettier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prettier"}},[t._v("#")]),t._v(" Prettier")]),t._v(" "),e("p",[t._v("Prettier 官网介绍是这样说的，Prettier 是一个有主见的代码格式化工具，支持多种语言并且集成到了很多编辑器中，并且已经成为了解决所有代码格式问题的优先方案了。")]),t._v(" "),e("p",[t._v("在格式化代码方面，Prettier 和 ESLint 确实有一些重叠，但是从大局观看两者的侧重点不同："),e("strong",[t._v("ESLint 主要工作是检查代码质量并给出提示")]),t._v("，它所能提供的格式化功能很有限（ESLint 也不推荐使用自己的格式化功能），并且只支持 JavaScript/TypeScript；"),e("strong",[t._v("而 Prettier 在格式化代码方面具有更大优势")]),t._v("，支持 JavaScript、Flow、TypeScript、CSS、SCSS、Less、JSX、Vue、GraphQL、JSON、Markdown 等语言。")]),t._v(" "),e("h3",{attrs:{id:"prettier-命令行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prettier-命令行"}},[t._v("#")]),t._v(" Prettier 命令行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install prettier -D\n\n# 格式化所有文件\nnpx prettier --write .\n")])])]),e("h3",{attrs:{id:"vs-code-使用-prettier-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-使用-prettier-插件"}},[t._v("#")]),t._v(" VS Code 使用 Prettier 插件")]),t._v(" "),e("p",[t._v("当我们提交代码时，使用命令行校验代码格式，再回去逐行改动格式，重新提交代码是十分影响效率的行为，另外如果项目过大，改动的文件很多，使用 Prettier 进行格式化的时间可能也会较长。")]),t._v(" "),e("p",[t._v("VS Code 安装了 Prettier 插件，这样在保存文件时就能格式化文件从而实现即时格式化。")]),t._v(" "),e("p",[t._v("安装完 Prettier 插件后，在用户或者工作区设置（即 "),e("code",[t._v("settings.json")]),t._v("）中将 VS Code 的默认格式化程序设置为 Prettier。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置全部语言在保存时自动格式化")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置全部语言的默认格式化程序为 prettier")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.defaultFormatter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"esbenp.prettier-vscode"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置特定语言 JavaScript 的默认格式化程序为 prettier，并设置在保存时自动格式化")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[javascript]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.defaultFormatter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"esbenp.prettier-vscode"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prettier 插件配置的公共规则")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier.semi"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier.arrowParens"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avoid"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier.singleQuote"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier.tabWidth"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vue 文件使用 vetur 作为默认格式化工具")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"[vue]"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.defaultFormatter"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"octref.vetur"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.formatOnSave"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vetur 把格式化 JavaScript 文件交给 prettier 处理")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"vetur.format.defaultFormatter.js"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"vetur.format.defaultFormatterOptions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vetur 使用的 prettier 的规则，此处的规则比上面设置的公共规则优先级高")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"semi"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"singleQuote"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("关于特定语言默认有："),e("code",[t._v("javascript")]),t._v("、"),e("code",[t._v("javascriptreact")]),t._v("、"),e("code",[t._v("typescript")]),t._v("、"),e("code",[t._v("typescriptreact")]),t._v("、"),e("code",[t._v("json")]),t._v("、"),e("code",[t._v("graphql")]),t._v("。其他的语言可以在 "),e("code",[t._v("settings.json")]),t._v(" 中使用 "),e("code",[t._v("files.associations")]),t._v(" 关联文件格式。")])]),t._v(" "),e("p",[t._v("还是跟 ESLint 一样的问题，既然在 VS Code 中用上了 Prettier 插件能即时进行格式化了，那么是不是就用不到命令行的 Prettier？")]),t._v(" "),e("p",[t._v("答案是还需要命令行的 Prettier ，因为不能保证项目的所有开发者都用了 VS Code，或者也有可能把 Prettier 插件手动关掉了，不管怎样，提交到仓库中的代码必须符合统一的代码规范和编码风格，所以在提交到仓库之前必须要进行一次 Prettier 格式化。")]),t._v(" "),e("h3",{attrs:{id:"prettier-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prettier-配置"}},[t._v("#")]),t._v(" Prettier 配置")]),t._v(" "),e("h4",{attrs:{id:"配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),e("p",[t._v("Prettier 配置文件支持多种形式：")]),t._v(" "),e("ul",[e("li",[t._v("根目录创建 "),e("code",[t._v(".prettierrc")]),t._v(" 文件，能够写入 "),e("code",[t._v("YML")]),t._v("、"),e("code",[t._v("JSON")]),t._v(" 的配置格式，并且支持 "),e("code",[t._v(".yaml")]),t._v("、"),e("code",[t._v(".yml")]),t._v("、"),e("code",[t._v(".json")]),t._v("、"),e("code",[t._v(".js")]),t._v("；")]),t._v(" "),e("li",[t._v("根目录创建 "),e("code",[t._v("prettier.config.js")]),t._v(" 文件，并对外 "),e("code",[t._v("export")]),t._v(" 一个对象")]),t._v(" "),e("li",[t._v("在 "),e("code",[t._v("package.json")]),t._v(" 中新建 "),e("code",[t._v("Prettier")]),t._v(" 属性")])]),t._v(" "),e("h4",{attrs:{id:"属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),e("p",[t._v("例如创建 "),e("code",[t._v("prettierrc.js")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("printWidth")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//换行的宽度，如果超过会进行换行，默认为80")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tabWidth")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//tab的空格宽度，默认为80")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("useTabs")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//缩进用tab还是空格，默认为false，表示用空格进行缩减")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("singleQuote")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串是否使用单引号，JSX会忽略这个配置，默认为false，使用双引号")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("semi")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//行尾是否使用分号，默认为true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("trailingComma")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//是否使用尾逗号，有三个可选值"<none|es5|all>"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("bracketSpacing")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对象大括号直接是否有空格，默认为true，效果：{ foo: bar }")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("arrowParens")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'avoid'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//箭头函数的单参数是否用括号包裹，有两个可选值"<always|avoid>"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("parser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'babylon'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码的解析引擎，默认为babylon，与babel相同。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"prettierignore-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prettierignore-文件"}},[t._v("#")]),t._v(" "),e("code",[t._v(".prettierignore")]),t._v(" 文件")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v(".prettierignore")]),t._v(" 文件完全忽略（即不重新格式化）某些文件和文件夹，跟 "),e("code",[t._v(".eslintignore")]),t._v(" 文件一样。")]),t._v(" "),e("h3",{attrs:{id:"prettier-与-eslint-配合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prettier-与-eslint-配合"}},[t._v("#")]),t._v(" Prettier 与 ESLint 配合")]),t._v(" "),e("p",[t._v("ESLint 和 Prettier 搭配使用时，他们有交集的那部分规则可能会导致 ESLint 和 Prettier 格式化后的代码格式不一致（比如单双引号/是否使用分号等）。例如 Prettier 格式化代码后再用 ESLint 去检测，会出现一些因为格式化导致的警告或报错，ESLint 进行修复后，又不符合 Prettier 的格式，然后保存的时候又会被格式化，然后陷入“死循环”。")]),t._v(" "),e("blockquote",[e("p",[t._v("这种问题的主要解决思路是在 ESLint 的规则配置文件上做文章，安装特定的扩展，把其配置到规则的尾部，实现 Prettier 规则对 ESLint 规则的覆盖。")])]),t._v(" "),e("p",[t._v("这就需要之前说的 "),e("a",{attrs:{href:"https://github.com/prettier/eslint-config-prettier",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-config-prettier"),e("OutboundLink")],1),t._v(" 扩展，它的作用就是禁用掉所有那些非必须或者和 prettier 冲突的 ESLint 规则。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('npm install eslint-config-prettier -D\n\n// 在 .eslintrc.* 文件中的 extends 字段的最后添加 prettier\n{\n  "extends": [\n    "eslint:recommended", // 已经配置的扩展\n    "prettier" // prettier 扩展添加到其他扩展的后面，可以实现 Prettier 规则对 ESLint 规则的覆盖\n  ]\n}\n')])])]),e("p",[t._v("以上只是把 ESLint 和 Prettier 会产生的一些冲突解决掉了，实现了运行 ESLint 命令会按照 Prettier 的规则做相关校验。但是如果要实现代码格式化，还得需要手动运行 Prettier 的相关命令来进行格式化，社区的解决方案是在使用 "),e("code",[t._v("eslint --fix")]),t._v(" 的时候，实际使用 Prettier 来替代 ESLint 的格式化功能。")]),t._v(" "),e("p",[t._v("这时候就需要用到之前讲过的 "),e("a",{attrs:{href:"https://github.com/prettier/eslint-plugin-prettier",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-prettier"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('npm install eslint-plugin-prettier -D\n\n// 在 .eslintrc.* 中的配置如下\n{\n  "plugins": ["prettier"],\n  "rules": {\n    "prettier/prettier": "error"\n  }\n}\n\n')])])]),e("p",[t._v("此时再执行 "),e("code",[t._v("eslint --fix")]),t._v(" 实际使用的是 Prettier 的规则去格式化代码。在 "),e("code",[t._v("rules")]),t._v(" 中添加 "),e("code",[t._v('"prettier/prettier": "error"')]),t._v("，当代码出现 Prettier 的规则校验出的格式化问题，ESLint 会报错。")]),t._v(" "),e("p",[t._v("如果想同时解决规则冲突和自动格式化，可以通过如下方式简化：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 .eslintrc.* 中的配置如下")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:prettier/recommended"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("上面的配置等价与下面的配置：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eslint-config-prettier 提供的，用于覆盖起冲突的规则")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"plugins"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册 eslint-plugin-prettier 插件")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prettier/prettier"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arrow-body-style"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prefer-arrow-callback"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"husky-lint-staged"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#husky-lint-staged"}},[t._v("#")]),t._v(" Husky + lint-staged")]),t._v(" "),e("p",[t._v("在整个前端代码规范和编程风格的流程最后两个工具，简单介绍一下。")]),t._v(" "),e("p",[t._v("为了保证仓库中的代码是符合代码规范和编程风格的，最好的方法是确保本地的代码已经通过检查才能 push 到远程，即在本地进行 "),e("code",[t._v("git commit")]),t._v(" 操作前触发对代码的检查，所以就需要 githook 工具 "),e("code",[t._v("husky")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# husky 的初始化，创建 .husky/ 目录并制定该目录为 git hooks 所在的目录，并且在 .husky/ 目录下会新增 pre-commit 的 shell 脚本，并且加入了 npm test 命令\n\nnpx husky-init && npm install\n\n# 在进行 git commit 之前运行 npx eslint src/** 检查\n\nnpx husky add .husky/pre-commit "npx eslint src/**"\n')])])]),e("p",[t._v("不过每次提交都检查所有的文件效率非常低，最好是每次只对当前修改后的文件进行扫描，即只对 "),e("code",[t._v("git add")]),t._v(" 加入到 "),e("code",[t._v("stage")]),t._v(" 缓存区的文件进行扫描，从而实现只对增量代码进行检查。这里就需要使用 "),e("code",[t._v("lint-staged")]),t._v(" 工具来识别被加入到 "),e("code",[t._v("stage")]),t._v(" 缓存区的文件。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{js}"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npx eslint --fix"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("对当前改动的 .js 文件在提交时进行检测和自动修复，自动修复完成后 lint-staged 默认会把改动的文件再次 add 到暂存区，如果有无法修复的错误会报错提示。")]),t._v(" "),e("p",[t._v("搭配 husky 使用时，修改 "),e("code",[t._v(".husky/pre-commit")]),t._v("，在 commit 之前运行 "),e("code",[t._v("npx lint-staged")]),t._v(" 来校验提交到暂存区中的文件：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/sh")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0")]),t._v('"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('/_/husky.sh"')]),t._v("\n\nnpx lint-staged\n")])])]),e("h3",{attrs:{id:"husky-lint-staged-eslint-更简单的集成方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#husky-lint-staged-eslint-更简单的集成方式"}},[t._v("#")]),t._v(" husky + lint-staged + eslint 更简单的集成方式")]),t._v(" "),e("p",[t._v("使用 "),e("a",{attrs:{href:"https://mrm.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("mrm"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# mrm最新版本使用 npx 执行有问题，所以使用 2.x 版本\nnpx mrm@2 lint-staged\n")])])]),e("p",[t._v("它其实相当于一个任务，做了三件事：")]),t._v(" "),e("ul",[e("li",[t._v("在 "),e("code",[t._v("package.json")]),t._v(" 中增加了 lint-staged 的配置")]),t._v(" "),e("li",[t._v("设置 "),e("code",[t._v("pre-commit")]),t._v(" git hook")]),t._v(" "),e("li",[t._v("安装依赖")])]),t._v(" "),e("h2",{attrs:{id:"推荐阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://learnku.com/articles/48341",target:"_blank",rel:"noopener noreferrer"}},[t._v("Visual Studio Code 使用笔记"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.51cto.com/article/704810.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("你不知道的 Vscode 之项目约束 | 仓库配置"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1546185",target:"_blank",rel:"noopener noreferrer"}},[t._v("统一代码风格工具——EditorConfig"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/TODO/reflections-on-eslints-success.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("回顾 ESLint 的成功"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6909788084666105864#heading-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 配置项解析"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6923141007663955982",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 之解析包名"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/53680918",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 工作原理探讨"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/427903272",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eslint 的实现原理，其实挺简单"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/53680918",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 工作原理探讨"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/wzFh_dvB13hq9OV3pC955w",target:"_blank",rel:"noopener noreferrer"}},[t._v("零基础理解 ESLint 核心原理"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/45-itfERV4R77WS0JL_Oew",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅析 eslint 原理"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/wYYDG7yU9h3-6DBYTCkuiA",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 机制分析与简单插件实践"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/cbWY0BYeNiCuNtpmylOH9g",target:"_blank",rel:"noopener noreferrer"}},[t._v("自己动手写符合自己业务需求的 eslint 规则"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/eZuJFDTh3UBmkXkubIT1_g",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么 Eslint 可以检查和修复格式问题，而 Babel 不可以？"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/406084980",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入对比 eslint 插件 和 babel 插件的异同点"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/gKekFhECTiMGt5L7Qfd59Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 ESLint 开启项目格式化"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/2XmU8A9l3EoTwPLRkuCetA",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端代码规范工程化最佳实践 - ESLint"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/81764012",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier 看这一篇就行了"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);