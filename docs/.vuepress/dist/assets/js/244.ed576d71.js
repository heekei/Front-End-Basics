(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{710:function(a,t,s){"use strict";s.r(t);var e=s(25),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"docker-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-命令"}},[a._v("#")]),a._v(" Docker 命令")]),a._v(" "),t("h2",{attrs:{id:"基础操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础操作"}},[a._v("#")]),a._v(" 基础操作")]),a._v(" "),t("h3",{attrs:{id:"_1-查看-docker-版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看-docker-版本"}},[a._v("#")]),a._v(" 1. 查看 Docker 版本")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 简单输出版本号")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 详细输出版本信息")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" version\n")])])]),t("h3",{attrs:{id:"_2-查看-docker-信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查看-docker-信息"}},[a._v("#")]),a._v(" 2. 查看 Docker 信息")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" info\n")])])]),t("ul",[t("li",[a._v("Client：docker 客户端信息")]),a._v(" "),t("li",[a._v("Server：docker 服务端信息")]),a._v(" "),t("li",[a._v("Containers：容器数量")]),a._v(" "),t("li",[a._v("Images：镜像数量")]),a._v(" "),t("li",[a._v("Server Version：docker 版本")]),a._v(" "),t("li",[a._v("Docker Root Dir：docker 根目录")]),a._v(" "),t("li",[a._v("Registry Mirrors：当前使用的镜像源")])]),a._v(" "),t("h3",{attrs:{id:"把用户加入-docker-用户组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#把用户加入-docker-用户组"}},[a._v("#")]),a._v(" 把用户加入 Docker 用户组")]),a._v(" "),t("p",[a._v("Docker 需要用户具有 sudo 权限，为了避免每次命令都输入 "),t("code",[a._v("sudo")]),a._v("，可以把用户加入 Docker 用户组，使其具有 Docker 权限。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("usermod")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-aG")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("\n")])])]),t("h3",{attrs:{id:"_3-启动-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-启动-docker"}},[a._v("#")]),a._v(" 3. 启动 Docker")]),a._v(" "),t("p",[a._v("Docker 是服务器——客户端架构，命令行操作 Docker 时，需要先启动 Docker 服务。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl start "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v("\n")])])]),t("h3",{attrs:{id:"_4-停止-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-停止-docker"}},[a._v("#")]),a._v(" 4. 停止 Docker")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl stop "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v("\n")])])]),t("h3",{attrs:{id:"_5-重启-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-重启-docker"}},[a._v("#")]),a._v(" 5. 重启 Docker")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl restart "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v("\n")])])]),t("h2",{attrs:{id:"dcoker-仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dcoker-仓库"}},[a._v("#")]),a._v(" Dcoker 仓库")]),a._v(" "),t("p",[a._v("Docker Hub 官网：https://hub.docker.com/")]),a._v(" "),t("h3",{attrs:{id:"docker-login"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-login"}},[a._v("#")]),a._v(" docker login")]),a._v(" "),t("p",[a._v("需要先在 Docker Hub 中注册一个账号才能在 Linux 登录")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过命令行方式输入账号密码")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" login\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过参数输入账号密码，这种方式不安全，密码会出现在 shell 的历史记录或日志文件中")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" login "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" poloyy "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" ***\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过 STDIN 输入密码，先将密码存储在 pwd.txt 文件中，可以解决上一个栗子的不安全问题")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" pwd.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" login "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" poloyy --password-stdin\n")])])]),t("h3",{attrs:{id:"docker-logout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-logout"}},[a._v("#")]),a._v(" docker logout")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("logout")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Removing login credentials for https://index.docker.io/v1/")]),a._v("\n")])])]),t("h3",{attrs:{id:"docker-pull"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-pull"}},[a._v("#")]),a._v(" docker pull")]),a._v(" "),t("p",[a._v("从镜像仓库中拉取或更新镜像")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker pull [OPTIONS] NAME[:TAG|@DIGEST]")])]),a._v(" "),t("p",[a._v("TAG：标签，不写的话默认是 latest 最新版")]),a._v(" "),t("h4",{attrs:{id:"options-说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-a, --all-tags ： 拉取所有 tagged 镜像")]),a._v(" "),t("li",[a._v("--disable-content-trust ： 忽略镜像的校验,默认开启")]),a._v(" "),t("li",[a._v("-q, --quiet ： 概要输出")]),a._v(" "),t("li",[a._v("--platform string ： 若服务支持多平台，这里可以设置平台")])]),a._v(" "),t("h4",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从 Docker Hub下载java最新版镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从 Docker Hub下载 REPOSITORY 为 java 的所有镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等价写法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull tomcat:8\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull docker.io/library/tomcat:8\n")])])]),t("h3",{attrs:{id:"docker-push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-push"}},[a._v("#")]),a._v(" docker push")]),a._v(" "),t("p",[a._v("将本地的镜像上传到镜像仓库，要先登录到镜像仓库")]),a._v(" "),t("p",[a._v("上传本地镜像的前置操作：")]),a._v(" "),t("ul",[t("li",[a._v("注册 Docker Hub 账号")]),a._v(" "),t("li",[a._v("Linux 登录 Docker Hub 账号")]),a._v(" "),t("li",[a._v("给镜像设置 TAG")])]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker push [OPTIONS] NAME[:TAG]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-2"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("--disable-content-trust ： 忽略镜像的校验,默认开启")])]),a._v(" "),t("h3",{attrs:{id:"docker-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-search"}},[a._v("#")]),a._v(" docker search")]),a._v(" "),t("p",[a._v("从 Docker Hub 上查找镜像")]),a._v(" "),t("p",[a._v("语法格式 "),t("code",[a._v("docker search [OPTIONS] NAME")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-3"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-f, --filter ： 根据提供的 filter 过滤输出")]),a._v(" "),t("li",[a._v("--limit N ： 搜索结果条数最大为 N（默认 25）")]),a._v(" "),t("li",[a._v("--no-trunc ： 显示完整的镜像 description")]),a._v(" "),t("li",[a._v("--format ： 使用 Go 模板进行美观打印")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 搜索 star 数量>1000 的 node 相关镜像并打印详细描述")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" search "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("stars")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),a._v(" --no-trunc "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 搜索自动构建的 node 相关镜像，能看到 AUTOMATED 都是 OK")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" search "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" is-automated"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 搜索 star 数量>100 且是官方版本的 node 镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" search "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("stars")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" is-official"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v("\n")])])]),t("h2",{attrs:{id:"本地镜像管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地镜像管理"}},[a._v("#")]),a._v(" 本地镜像管理")]),a._v(" "),t("h3",{attrs:{id:"docker-images"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-images"}},[a._v("#")]),a._v(" docker images")]),a._v(" "),t("p",[a._v("列出本地所有的镜像")]),a._v(" "),t("p",[a._v("语法： "),t("code",[a._v("docker images [OPTIONS] [REPOSITORY[:TAG]]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-4"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-a, --all 列出本地所有的镜像（含中间镜像层，默认情况下，过滤掉中间映像层）")]),a._v(" "),t("li",[a._v("--digests 显示镜像的摘要信息")]),a._v(" "),t("li",[a._v("-f, --filter filter 显示满足条件（filter）的镜像")]),a._v(" "),t("li",[a._v("--format string 使用模板格式化输出")]),a._v(" "),t("li",[a._v("--no-trunc 显示完整的镜像信息")]),a._v(" "),t("li",[a._v("-q, --quiet 只显示镜像 ID")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker images\n\nREPOSITORY            TAG                 IMAGE ID            CREATED           SIZE\nhello-world           latest              bf756fb1ae65        4 months ago     13.3kB\nmysql                 5.7                 b84d68d0a7db        6 days ago       448MB\n\n# 解释\n#REPOSITORY            # 镜像的仓库源\n#TAG                # 镜像的标签(版本)        ---lastest 表示最新版本\n#IMAGE ID            # 镜像的id\n#CREATED            # 镜像的创建时间\n#SIZE                # 镜像的大小\n")])])]),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定镜像名")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images hello-world\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定镜像名和 tag")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images hello-world:latest\n")])])]),t("h3",{attrs:{id:"docker-rmi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-rmi"}},[a._v("#")]),a._v(" docker rmi")]),a._v(" "),t("p",[a._v("删除一个或多个镜像")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker rmi [OPTIONS] IMAGE [IMAGE...]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-5"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-f 强制删除")]),a._v(" "),t("li",[a._v("--no-prune 不移除该镜像的过程镜像，默认移除")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像，且不带 tag")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi hello-world\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除镜像，且带 tag")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" tomcat:latest\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据镜像 id 删除镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" fd484f19954f\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-aq")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除多个镜像")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" tomcat mysql\n")])])]),t("h3",{attrs:{id:"docker-tag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-tag"}},[a._v("#")]),a._v(" docker tag")]),a._v(" "),t("p",[a._v("给本地镜像打一个标记（tag），可将其归入某一仓库，有点像 Git 里面给不同时段写的代码打不同的 tag 一样")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打了新的 TAG 虽然会多了一条记录，但是从 IMAGE ID 可以得知他们是同一个镜像，类比：在 git 中，同一个代码项目，可以有多个不同的 tag")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" tag abc/poloyy:latest abc/poloyy:new\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 也能更改镜像的名字")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" tag abc/poloyy:new efd/poloyy:new2\n")])])]),t("h3",{attrs:{id:"docker-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-import"}},[a._v("#")]),a._v(" docker import")]),a._v(" "),t("p",[a._v("从 tar 归档文件中创建镜像")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]")])]),a._v(" "),t("p",[a._v("ptions 说明")]),a._v(" "),t("ul",[t("li",[a._v("-m 提交时的说明文字")]),a._v(" "),t("li",[a._v("-c 将 Dockerfile 指令应用于创建的映像")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" test.tar poloyy/tomcat\n")])])]),t("h2",{attrs:{id:"容器操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器操作"}},[a._v("#")]),a._v(" 容器操作")]),a._v(" "),t("h3",{attrs:{id:"docker-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-create"}},[a._v("#")]),a._v(" docker create")]),a._v(" "),t("p",[a._v("创建一个新的容器但不启动它。")]),a._v(" "),t("p",[a._v("这类似于 docker run -d，但容器从未启动过。 然后，您可以使用 "),t("code",[a._v("docker start <container_id>")]),a._v(" 命令在任何位置启动容器。")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker create [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-6"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("--name 指定容器的名字")])]),a._v(" "),t("p",[t("code",[a._v("docker create --name tomcat7 tomcat:7")])]),a._v(" "),t("ul",[t("li",[a._v("-e 或 --env 设置环境变量")])]),a._v(" "),t("p",[t("code",[a._v('docker create -e "MY_VAR=value" ubuntu:latest')])]),a._v(" "),t("ul",[t("li",[a._v("-v 或 --volume 挂载卷")])]),a._v(" "),t("p",[t("code",[a._v("docker create -v /host/path:/container/path ubuntu:latest")])]),a._v(" "),t("ul",[t("li",[a._v("-p 或 --publish 指定端口映射")])]),a._v(" "),t("p",[t("code",[a._v("docker create -p 8080:80 ubuntu:latest")])]),a._v(" "),t("ul",[t("li",[a._v("--restart 设置重启策略")])]),a._v(" "),t("p",[t("code",[a._v("docker create --restart always ubuntu:latest")])]),a._v(" "),t("ul",[t("li",[a._v("--network 指定网络")])]),a._v(" "),t("p",[t("code",[a._v("docker create --network my_network ubuntu:latest")])]),a._v(" "),t("ul",[t("li",[a._v("--cpus 和 --memory 指定 CPU 和内存限制")])]),a._v(" "),t("p",[t("code",[a._v('docker create --cpus="1.5" --memory="512m" ubuntu:latest')])]),a._v(" "),t("ul",[t("li",[a._v("-w 或 --workdir 设置容器工作目录")])]),a._v(" "),t("p",[t("code",[a._v("docker create -w /app ubuntu:latest")])]),a._v(" "),t("ul",[t("li",[a._v("指定运行的命令：如果你想指定容器启动时的默认命令，可以直接在命令的末尾添加。")])]),a._v(" "),t("p",[t("code",[a._v('docker create ubuntu:latest echo "Hello World"')])]),a._v(" "),t("h3",{attrs:{id:"docker-start-stop-restart"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-start-stop-restart"}},[a._v("#")]),a._v(" docker start/stop/restart")]),a._v(" "),t("ul",[t("li",[a._v("docker start：启动一个或多个已经被停止的容器")]),a._v(" "),t("li",[a._v("docker stop：停止一个或多个运行中的容器")]),a._v(" "),t("li",[a._v("docker restart：重启一个或多个容器")])]),a._v(" "),t("h4",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker start [OPTIONS] CONTAINER [CONTAINER...]\ndocker stop [OPTIONS] CONTAINER [CONTAINER...]\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n")])])]),t("h4",{attrs:{id:"stop-restart-命令的-options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stop-restart-命令的-options"}},[a._v("#")]),a._v(" stop/restart 命令的 options")]),a._v(" "),t("ul",[t("li",[a._v("-t, --time 杀死容器之前等待停止的秒数（默认为 10）")])]),a._v(" "),t("h4",{attrs:{id:"示例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),t("p",[a._v("假设有一个容器 name 是 tomcat3 ，id 是 7759aec97ebf")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#根据容器 ID 启动、关闭、重启")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" start 59aec7797ebf\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop 59aec7797ebf\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" restart 59aec7797ebf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#根据容器名字启动、关闭、重启")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" start myTomcat3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop myTomcat3\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" restart myTomcat3\n")])])]),t("p",[a._v("启动、关闭、重启所有容器")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" start "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" restart "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("h3",{attrs:{id:"docker-ps-列出容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-ps-列出容器"}},[a._v("#")]),a._v(" docker ps 列出容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker ps [OPTIONS]\n")])])]),t("h4",{attrs:{id:"options-说明-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-7"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-a, --all 显示全部容器（默认只显示运行中的容器）")]),a._v(" "),t("li",[a._v("-f, --filter filter 根据提供的 filter 过滤输出")]),a._v(" "),t("li",[a._v("-n, --last int 列出最近创建的 n 个容器（默认-1，代表全部）")]),a._v(" "),t("li",[a._v("-l, --latest 显示最近创建的容器（包括所有状态的容器）")]),a._v(" "),t("li",[a._v("-s, --size 显示总的文件大小")]),a._v(" "),t("li",[a._v("--no-trunc 显示完整的镜像 ID")]),a._v(" "),t("li",[a._v("-q, --quiet 静默模式，只显示容器 ID")])]),a._v(" "),t("h4",{attrs:{id:"实际例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实际例子"}},[a._v("#")]),a._v(" 实际例子")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 不带options")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示全部容器，和总文件大小")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示最近创建的容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示最近创建的 2 个容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示完整的镜像ID")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" --no-trunc\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 只显示镜像ID")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),a._v("\n")])])]),t("h4",{attrs:{id:"列表字段介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表字段介绍"}},[a._v("#")]),a._v(" 列表字段介绍")]),a._v(" "),t("ul",[t("li",[a._v("CONTAINER ID：容器 ID")]),a._v(" "),t("li",[a._v("IMAGE：使用的镜像")]),a._v(" "),t("li",[a._v("COMMAND：启动容器时后，容器运行的命令")]),a._v(" "),t("li",[a._v("CREATED：容器的创建时间")]),a._v(" "),t("li",[a._v("STATUS：容器状态")]),a._v(" "),t("li",[a._v("PORTS：实际运行端口，若有指定运行端口则会显示指定的端口和默认运行端口，以及连接类型（ tcp / udp ）")]),a._v(" "),t("li",[a._v("NAMES：容器名字")]),a._v(" "),t("li",[a._v("SIZE：容器全部文件的总大小，也会显示容器大小")])]),a._v(" "),t("h4",{attrs:{id:"容器状态介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器状态介绍"}},[a._v("#")]),a._v(" 容器状态介绍")]),a._v(" "),t("ul",[t("li",[a._v("created：已创建")]),a._v(" "),t("li",[a._v("restarting：重启中")]),a._v(" "),t("li",[a._v("running：运行中")]),a._v(" "),t("li",[a._v("removing：迁移中")]),a._v(" "),t("li",[a._v("paused：暂停")]),a._v(" "),t("li",[a._v("exited：停止")]),a._v(" "),t("li",[a._v("dead：死亡")])]),a._v(" "),t("h3",{attrs:{id:"docker-run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-run"}},[a._v("#")]),a._v(" docker run")]),a._v(" "),t("p",[a._v("创建一个新的容器并运行一个命令")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]")])]),a._v(" "),t("p",[a._v("COMMAND ：需要在容器内执行的命令")]),a._v(" "),t("p",[a._v("其实跟 docker create 一样的语法格式和几乎一样的参数，只不过可以运行容器甚至进入容器内部。因为它在后台会先调用 docker create，然后再执行 docker start")]),a._v(" "),t("h4",{attrs:{id:"docker-run-执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-run-执行流程"}},[a._v("#")]),a._v(" docker run 执行流程")]),a._v(" "),t("ul",[t("li",[a._v("首先在指定镜像上创建一个可写的容器层（docker create）")]),a._v(" "),t("li",[a._v("然后使用指定的命令（COMMAND）启动它（docker start）")]),a._v(" "),t("li",[a._v("docker run 相当于执行了两个 API：/containers/create、/containers/(id)/start")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#根据 tag 7 的 tomcat 镜像，创建一个 tomcat7 容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" create "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 tomcat:7\n")])])]),t("h4",{attrs:{id:"options-说明-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-8"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-i 以交互模式运行容器，通常与 -t 同时使用")]),a._v(" "),t("li",[a._v("-t 启动容器后，为容器分配一个伪输入终端（pseudo-TTY），通常与 -i 同时使用")]),a._v(" "),t("li",[a._v("-v，--volume 目录映射，容器目录挂载到宿主机目录，格式： <host 目录>:<容器目录>")]),a._v(" "),t("li",[a._v("-d 或 --detach 守护进程，后台运行该容器")]),a._v(" "),t("li",[a._v("-p 指定端口映射，格式：主机(宿主)端口:容器端口")]),a._v(" "),t("li",[a._v("-P 随机端口映射，容器内部端口随机映射到主机的端口")]),a._v(" "),t("li",[a._v("-u 以什么用户身份创建容器")]),a._v(" "),t("li",[a._v('--name "nginx-lb" 容器名字')]),a._v(" "),t("li",[a._v("-m, --memory bytes 设置容器使用内存最大值")]),a._v(" "),t("li",[a._v("-h, --hostname string 指定容器的 host name")]),a._v(" "),t("li",[a._v("--dns 8.8.8.8 指定容器 dns 服务器")]),a._v(" "),t("li",[a._v('-e username="ritchie" 设置环境变量')]),a._v(" "),t("li",[a._v("--restart Docker 重启后，容器是否自动重启")]),a._v(" "),t("li",[a._v("--privileged 容器内是否使用真正的 root 权限")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 tomcat:7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7，在后台运行")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 tomcat:7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7，在后台运行，将容器的 8080 端口映射到主机的随机端口")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-P")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 tomcat:7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7，在后台运行，将容器的 8080 端口映射到主机的 8081 端口")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8081")]),a._v(":8080 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 tomcat:7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7，在后台运行，将容器的 8080 端口映射到主机的 8081 端口，主机的目录 /usr/local/tomcat/webapps 映射到容器的 /usr/local/tomcat/webapps")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8081")]),a._v(":8080 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat7 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" /usr/local/tomcat/webapps:/usr/local/tomcat/webapps tomcat:7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用镜像 tomcat:7，容器命名为 tomcat7，在后台运行，将容器的 8080 端口映射到主机的 11.20.72.43:8888 端口，主机的目录 usr/local/webapps 映射到容器的 usr/local/webapps，启动容器后，在容器内执行 bash 命令")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("111.20")]),a._v(".72.43:8888:8080 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" /usr/local/webapps:/usr/local/webapps "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" tomcat77 tomcat:7 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 注意：这里不加 -it 的话，容器是无法再启动的，加上才能启动容器并执行 bash 命令")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 容器 8080 端口映射到主机的 1111 端口，-it 以交互模式启动一个容器，在容器内执行 bash 命令")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1111")]),a._v(":8080 tomcat:7 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 注意：如果这里加了 -d  参数，则不会进入容器的 CLI 界面；如果不加 bash 命令，则会执行 tomcat 容器本身自动会执行的命令（ catalina.sh run ），也会进不了 CLI 界面，因为会打印一堆运行日志")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 以 root 权限创建容器，当进入容器之后，拥有 root 权限去执行命令")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" jenkin2 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--privileged")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true jenkins/jenkins\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 虽然是拥有了 root 权限，但并不一定是 root 用户身份，所以最好加 -uroot 指定 root 用户身份")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 该容器在 Docker 重启后会自动启动无需手动启动")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" jenkins2 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--restart")]),a._v(" always jenkins/jenkins\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 退出容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#容器直接退出")]),a._v("\nctrl P + ctrl Q  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#容器不停止退出     ---注意：这个很有用的操作")]),a._v("\n")])])]),t("h3",{attrs:{id:"docker-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-exec"}},[a._v("#")]),a._v(" docker exec")]),a._v(" "),t("p",[a._v("在正在运行的容器中运行命令")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG...]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-9"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-d 在后台运行命令")]),a._v(" "),t("li",[a._v("-i 即使没有附加也保持 STDIN 打开，和 -t 配合")]),a._v(" "),t("li",[a._v("-t 进入容器的 CLI 模式")]),a._v(" "),t("li",[a._v("-e 设置环境变量")]),a._v(" "),t("li",[a._v("--env-file 读入环境变量文件")]),a._v(" "),t("li",[a._v("-w 需要执行命令的目录")]),a._v(" "),t("li",[a._v("-u 指定访问容器的用户名")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行 tomcat 容器的 startup.sh 脚本")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" tomcat7 startup.sh\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 进入容器的 CLI 模式（最常用）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" tomcat7 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行普通命令")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" tomcat7 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定工作目录执行命令")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-w")]),a._v(" /usr tomcat7 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 以 root 用户身份进入容器（重点），好处就是，你在容器里敲命令就是 root 权限的，不存在权限不足的问题")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" root jenkins1 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),t("h3",{attrs:{id:"docker-attach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-attach"}},[a._v("#")]),a._v(" docker attach")]),a._v(" "),t("p",[a._v("进入容器正在执行的终端。和 docker exec 的区别是：")]),a._v(" "),t("ul",[t("li",[a._v("docker exec 进入当前容器后开启一个新的终端，可以在里面操作。（常用）")]),a._v(" "),t("li",[a._v("docker attach 进入容器正在执行某个命令的终端，不能在里面操作")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" topdemo ubuntu /usr/bin/top "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" attach topdemo\n")])])]),t("h3",{attrs:{id:"docker-pause-unpause"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-pause-unpause"}},[a._v("#")]),a._v(" docker pause/unpause")]),a._v(" "),t("ul",[t("li",[a._v("docker pause：暂停一个或多个容器中的所有进程")]),a._v(" "),t("li",[a._v("docker unpause：恢复一个或多个容器中的所有进程")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 暂停 tomcat 容器的服务")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pause tomcat7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 恢复 tomcat 容器的服务")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" unpause tomcat7\n")])])]),t("h3",{attrs:{id:"docker-kill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-kill"}},[a._v("#")]),a._v(" docker kill")]),a._v(" "),t("p",[a._v("杀死一个或多个正在运行的容器")]),a._v(" "),t("h4",{attrs:{id:"重点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点"}},[a._v("#")]),a._v(" 重点")]),a._v(" "),t("ul",[t("li",[a._v("docker kill 子命令可杀死一个或多个容器")]),a._v(" "),t("li",[a._v("向容器内部的主进程发送 SIGKILL 信号（默认），或使用 --signal 选项指定的信号")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-10"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-s 发送什么信号到容器，默认 KILL")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据容器名字杀掉容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" tomcat7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据容器ID杀掉容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" 65d4a94f7a39\n")])])]),t("h3",{attrs:{id:"docker-rm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-rm"}},[a._v("#")]),a._v(" docker rm")]),a._v(" "),t("p",[a._v("删除一个或多个容器")]),a._v(" "),t("h4",{attrs:{id:"options-说明-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-11"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-f 通过 SIGKILL 信号删除一个正在运行的容器")]),a._v(" "),t("li",[a._v("-l 移除容器间的网络，而非容器本身")]),a._v(" "),t("li",[a._v("-v 删除与容器映射的目录")])]),a._v(" "),t("h4",{attrs:{id:"示例-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 强制删除容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" tomcat7\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有已停止的容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-aq")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"status=exited"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有的容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-aq")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#删除所有的容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" -q"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("xargs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#删除所有的容器")]),a._v("\n")])])]),t("h3",{attrs:{id:"docker-top"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-top"}},[a._v("#")]),a._v(" docker top")]),a._v(" "),t("p",[a._v("显示容器正在运行的进程")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有运行的进程")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" nginx\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出指定名称的正在运行的进程")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" nginx "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" redis\n")])])]),t("h3",{attrs:{id:"docker-logs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-logs"}},[a._v("#")]),a._v(" docker logs")]),a._v(" "),t("p",[a._v("提取容器的日志")]),a._v(" "),t("h4",{attrs:{id:"options-说明-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-12"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("--details 显示提供给日志的其他详细信息")]),a._v(" "),t("li",[a._v("-f, --follow 跟踪日志输出")]),a._v(" "),t("li",[a._v("--tail 仅列出最新 N 条容器日志")]),a._v(" "),t("li",[a._v("-t, --timestamps 显示时间戳-")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 给日志加时间戳")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" nginx1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印最新 5 条日志")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--tail")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" nginx1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 跟踪打印日志，日志刷新时，就能实时看到最新的日志了")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" nginx1\n")])])]),t("h3",{attrs:{id:"docker-port"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-port"}},[a._v("#")]),a._v(" docker port")]),a._v(" "),t("p",[a._v("列出指定的容器的端口映射")]),a._v(" "),t("p",[a._v("语法格式: "),t("code",[a._v("docker port CONTAINER [PRIVATE_PORT[/PROTO]]")])]),a._v(" "),t("ul",[t("li",[a._v("PRIVATE_PORT 指定查询的端口")]),a._v(" "),t("li",[a._v("PROTO 协议类型（tcp、udp）")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出容器所有端口的映射")]),a._v("\n "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" port gitlab\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出容器指定端口的映射")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" port gitlab "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出容器指定端口和协议的映射")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" port gitlab "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("/tcp\n")])])]),t("h3",{attrs:{id:"docker-export"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-export"}},[a._v("#")]),a._v(" docker export")]),a._v(" "),t("p",[a._v("将容器的文件系统导出为 tar 文件")]),a._v(" "),t("p",[a._v("语法规则： "),t("code",[a._v("docker export [OPTIONS] CONTAINER")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-13"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("p",[a._v("-o 将输入内容写到文件")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" test.tar jenkins1\n")])])]),t("h3",{attrs:{id:"docker-cp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-cp"}},[a._v("#")]),a._v(" docker cp")]),a._v(" "),t("p",[a._v("在容器和主机之间复制文件/文件夹")]),a._v(" "),t("p",[a._v("语法格式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\ndocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n")])])]),t("h4",{attrs:{id:"重点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点-2"}},[a._v("#")]),a._v(" 重点")]),a._v(" "),t("ul",[t("li",[a._v("容器 container 可以是正在运行或已停止的容器")]),a._v(" "),t("li",[a._v("SRC_PATH 或 DEST_PATH 可以是文件或目录")]),a._v(" "),t("li",[a._v("该命令会假定容器路径相对于容器的 /（根）目录")]),a._v(" "),t("li",[a._v("而主机路径则是相对于执行 docker cp 命令的当前目录-")])]),a._v(" "),t("h4",{attrs:{id:"src-path-和-dest-path-的讲解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#src-path-和-dest-path-的讲解"}},[a._v("#")]),a._v(" SRC_PATH 和 DEST_PATH 的讲解")]),a._v(" "),t("p",[a._v("SRC_PATH 指定一个文件")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("若 DEST_PATH 不存在")])]),a._v(" "),t("li",[t("p",[a._v("创建 DEST_PATH 所需的文件夹，文件正常保存到 DEST_PATH 中")])]),a._v(" "),t("li",[t("p",[a._v("若 DEST_PATH 不存在，并以 / 结尾")])]),a._v(" "),t("li",[t("p",[a._v("错误：目标目录必须存在")])]),a._v(" "),t("li",[t("p",[a._v("若 DEST_PATH 存在并且是一个文件")])]),a._v(" "),t("li",[t("p",[a._v("目标被源文件的内容覆盖")])]),a._v(" "),t("li",[t("p",[a._v("若 DEST_PATH 存在并且是目录")])]),a._v(" "),t("li",[t("p",[a._v("使用 SRC_PATH 中的基本名称将文件复制到此目录中")])])]),a._v(" "),t("p",[a._v("SRC_PATH 指定目录")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("若 DEST_PATH 不存在")])]),a._v(" "),t("li",[t("p",[a._v("将 DEST_PATH 创建为目录，并将源目录的内容复制到该目录中")])]),a._v(" "),t("li",[t("p",[a._v("若 DEST_PATH 存在并且是一个文件")])]),a._v(" "),t("li",[t("p",[a._v("错误：无法将目录复制到文件")])]),a._v(" "),t("li",[t("p",[a._v("若 DEST_PATH 存在并且是目录")])]),a._v(" "),t("li",[t("p",[a._v("SRC_PATH 不以 /. 结尾，源目录复制到此目录")])]),a._v(" "),t("li",[t("p",[a._v("SRC_PATH 以 /. 结尾，源目录的内容被复制到该目录中")])])]),a._v(" "),t("h4",{attrs:{id:"从容器复制文件到主机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从容器复制文件到主机"}},[a._v("#")]),a._v(" 从容器复制文件到主机")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 主机已存在的目录")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" tomcat7:usr/local/tomcat/README.md ./\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 不存在的目录")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" tomcat7:usr/local/tomcat/README.md test/ "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 会报错")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 已存在的文件")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" tomcat7:usr/local/tomcat/README.md test.txt "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 被覆盖")]),a._v("\n")])])]),t("h4",{attrs:{id:"从主机复制文件到容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从主机复制文件到容器"}},[a._v("#")]),a._v(" 从主机复制文件到容器")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" test.txt tomcat7:/\n")])])]),t("h4",{attrs:{id:"从主机复制目录到容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从主机复制目录到容器"}},[a._v("#")]),a._v(" 从主机复制目录到容器")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 目标目录不存在")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" tomcat7:test/\n")])])]),t("h4",{attrs:{id:"从容器复制目录到主机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从容器复制目录到主机"}},[a._v("#")]),a._v(" 从容器复制目录到主机")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" tomcat7:/usr/local/tomcat/webapps.list /usr/local/\n")])])]),t("h3",{attrs:{id:"docker-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-diff"}},[a._v("#")]),a._v(" docker diff")]),a._v(" "),t("p",[a._v("检查容器文件系统上文件或目录的更改情况")]),a._v(" "),t("h4",{attrs:{id:"结果字段说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结果字段说明"}},[a._v("#")]),a._v(" 结果字段说明")]),a._v(" "),t("ul",[t("li",[a._v("A 添加了文件或目录")]),a._v(" "),t("li",[a._v("D 删除了文件或目录")]),a._v(" "),t("li",[a._v("C 修改了文件或目录")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据容器名字")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" gitlab\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 根据容器 ID")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" 78b4a7917f0d\n")])])]),t("h3",{attrs:{id:"docker-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-commit"}},[a._v("#")]),a._v(" docker commit")]),a._v(" "),t("p",[a._v("用于将一个运行中的容器的当前状态保存为一个新的 Docker "),t("strong",[a._v("镜像")]),a._v("。这在你想要基于现有容器创建新的镜像时非常有用，尤其是当你在容器中进行了手动更改而想要保存这些更改时。")]),a._v(" "),t("p",[a._v("语法格式："),t("code",[a._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]")])]),a._v(" "),t("h4",{attrs:{id:"options-说明-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-说明-14"}},[a._v("#")]),a._v(" options 说明")]),a._v(" "),t("ul",[t("li",[a._v("-a 提交镜像的作者")]),a._v(" "),t("li",[a._v("-c，--change 更改 Dockerfile 指令来创建镜像")]),a._v(" "),t("li",[a._v("-m 提交时的说明文字")]),a._v(" "),t("li",[a._v("-p commit 时，将容器暂停")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 不带参数的例子")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit jenkins1 jenkins/poloyy\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 带参数的例子")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" fangxu "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"test"')]),a._v(" jenkins1 jenkins/poloyy\n")])])]),t("h2",{attrs:{id:"资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[a._v("#")]),a._v(" 资料")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/poloyy/p/13922325.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 命令大全"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);